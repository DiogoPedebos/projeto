
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Metadados
 * 
 */
export type Metadados = $Result.DefaultSelection<Prisma.$MetadadosPayload>
/**
 * Model Unidades
 * 
 */
export type Unidades = $Result.DefaultSelection<Prisma.$UnidadesPayload>
/**
 * Model DadosAtuais
 * 
 */
export type DadosAtuais = $Result.DefaultSelection<Prisma.$DadosAtuaisPayload>
/**
 * Model DadosDiarios
 * 
 */
export type DadosDiarios = $Result.DefaultSelection<Prisma.$DadosDiariosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Metadados
 * const metadados = await prisma.metadados.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Metadados
   * const metadados = await prisma.metadados.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.metadados`: Exposes CRUD operations for the **Metadados** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Metadados
    * const metadados = await prisma.metadados.findMany()
    * ```
    */
  get metadados(): Prisma.MetadadosDelegate<ExtArgs>;

  /**
   * `prisma.unidades`: Exposes CRUD operations for the **Unidades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Unidades
    * const unidades = await prisma.unidades.findMany()
    * ```
    */
  get unidades(): Prisma.UnidadesDelegate<ExtArgs>;

  /**
   * `prisma.dadosAtuais`: Exposes CRUD operations for the **DadosAtuais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DadosAtuais
    * const dadosAtuais = await prisma.dadosAtuais.findMany()
    * ```
    */
  get dadosAtuais(): Prisma.DadosAtuaisDelegate<ExtArgs>;

  /**
   * `prisma.dadosDiarios`: Exposes CRUD operations for the **DadosDiarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DadosDiarios
    * const dadosDiarios = await prisma.dadosDiarios.findMany()
    * ```
    */
  get dadosDiarios(): Prisma.DadosDiariosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Metadados: 'Metadados',
    Unidades: 'Unidades',
    DadosAtuais: 'DadosAtuais',
    DadosDiarios: 'DadosDiarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "metadados" | "unidades" | "dadosAtuais" | "dadosDiarios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Metadados: {
        payload: Prisma.$MetadadosPayload<ExtArgs>
        fields: Prisma.MetadadosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetadadosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetadadosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>
          }
          findFirst: {
            args: Prisma.MetadadosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetadadosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>
          }
          findMany: {
            args: Prisma.MetadadosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>[]
          }
          create: {
            args: Prisma.MetadadosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>
          }
          createMany: {
            args: Prisma.MetadadosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetadadosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>[]
          }
          delete: {
            args: Prisma.MetadadosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>
          }
          update: {
            args: Prisma.MetadadosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>
          }
          deleteMany: {
            args: Prisma.MetadadosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetadadosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MetadadosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetadadosPayload>
          }
          aggregate: {
            args: Prisma.MetadadosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetadados>
          }
          groupBy: {
            args: Prisma.MetadadosGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetadadosGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetadadosCountArgs<ExtArgs>
            result: $Utils.Optional<MetadadosCountAggregateOutputType> | number
          }
        }
      }
      Unidades: {
        payload: Prisma.$UnidadesPayload<ExtArgs>
        fields: Prisma.UnidadesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnidadesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnidadesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          findFirst: {
            args: Prisma.UnidadesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnidadesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          findMany: {
            args: Prisma.UnidadesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>[]
          }
          create: {
            args: Prisma.UnidadesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          createMany: {
            args: Prisma.UnidadesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnidadesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>[]
          }
          delete: {
            args: Prisma.UnidadesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          update: {
            args: Prisma.UnidadesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          deleteMany: {
            args: Prisma.UnidadesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnidadesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UnidadesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnidadesPayload>
          }
          aggregate: {
            args: Prisma.UnidadesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnidades>
          }
          groupBy: {
            args: Prisma.UnidadesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnidadesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnidadesCountArgs<ExtArgs>
            result: $Utils.Optional<UnidadesCountAggregateOutputType> | number
          }
        }
      }
      DadosAtuais: {
        payload: Prisma.$DadosAtuaisPayload<ExtArgs>
        fields: Prisma.DadosAtuaisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DadosAtuaisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DadosAtuaisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>
          }
          findFirst: {
            args: Prisma.DadosAtuaisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DadosAtuaisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>
          }
          findMany: {
            args: Prisma.DadosAtuaisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>[]
          }
          create: {
            args: Prisma.DadosAtuaisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>
          }
          createMany: {
            args: Prisma.DadosAtuaisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DadosAtuaisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>[]
          }
          delete: {
            args: Prisma.DadosAtuaisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>
          }
          update: {
            args: Prisma.DadosAtuaisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>
          }
          deleteMany: {
            args: Prisma.DadosAtuaisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DadosAtuaisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DadosAtuaisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosAtuaisPayload>
          }
          aggregate: {
            args: Prisma.DadosAtuaisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDadosAtuais>
          }
          groupBy: {
            args: Prisma.DadosAtuaisGroupByArgs<ExtArgs>
            result: $Utils.Optional<DadosAtuaisGroupByOutputType>[]
          }
          count: {
            args: Prisma.DadosAtuaisCountArgs<ExtArgs>
            result: $Utils.Optional<DadosAtuaisCountAggregateOutputType> | number
          }
        }
      }
      DadosDiarios: {
        payload: Prisma.$DadosDiariosPayload<ExtArgs>
        fields: Prisma.DadosDiariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DadosDiariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DadosDiariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>
          }
          findFirst: {
            args: Prisma.DadosDiariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DadosDiariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>
          }
          findMany: {
            args: Prisma.DadosDiariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>[]
          }
          create: {
            args: Prisma.DadosDiariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>
          }
          createMany: {
            args: Prisma.DadosDiariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DadosDiariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>[]
          }
          delete: {
            args: Prisma.DadosDiariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>
          }
          update: {
            args: Prisma.DadosDiariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>
          }
          deleteMany: {
            args: Prisma.DadosDiariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DadosDiariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DadosDiariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosDiariosPayload>
          }
          aggregate: {
            args: Prisma.DadosDiariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDadosDiarios>
          }
          groupBy: {
            args: Prisma.DadosDiariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<DadosDiariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.DadosDiariosCountArgs<ExtArgs>
            result: $Utils.Optional<DadosDiariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.DriverAdapter | null
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Metadados
   */

  export type AggregateMetadados = {
    _count: MetadadosCountAggregateOutputType | null
    _avg: MetadadosAvgAggregateOutputType | null
    _sum: MetadadosSumAggregateOutputType | null
    _min: MetadadosMinAggregateOutputType | null
    _max: MetadadosMaxAggregateOutputType | null
  }

  export type MetadadosAvgAggregateOutputType = {
    id: number | null
    altura: number | null
    latitude: number | null
    longitude: number | null
    offsetHorarioUtc: number | null
    tempoGeracaoMs: number | null
  }

  export type MetadadosSumAggregateOutputType = {
    id: number | null
    altura: number | null
    latitude: number | null
    longitude: number | null
    offsetHorarioUtc: number | null
    tempoGeracaoMs: number | null
  }

  export type MetadadosMinAggregateOutputType = {
    id: number | null
    modelrunUpdatetimeUtc: Date | null
    nome: string | null
    altura: number | null
    abreviacaoFusoHorario: string | null
    latitude: number | null
    modelrunUtc: Date | null
    longitude: number | null
    offsetHorarioUtc: number | null
    tempoGeracaoMs: number | null
  }

  export type MetadadosMaxAggregateOutputType = {
    id: number | null
    modelrunUpdatetimeUtc: Date | null
    nome: string | null
    altura: number | null
    abreviacaoFusoHorario: string | null
    latitude: number | null
    modelrunUtc: Date | null
    longitude: number | null
    offsetHorarioUtc: number | null
    tempoGeracaoMs: number | null
  }

  export type MetadadosCountAggregateOutputType = {
    id: number
    modelrunUpdatetimeUtc: number
    nome: number
    altura: number
    abreviacaoFusoHorario: number
    latitude: number
    modelrunUtc: number
    longitude: number
    offsetHorarioUtc: number
    tempoGeracaoMs: number
    _all: number
  }


  export type MetadadosAvgAggregateInputType = {
    id?: true
    altura?: true
    latitude?: true
    longitude?: true
    offsetHorarioUtc?: true
    tempoGeracaoMs?: true
  }

  export type MetadadosSumAggregateInputType = {
    id?: true
    altura?: true
    latitude?: true
    longitude?: true
    offsetHorarioUtc?: true
    tempoGeracaoMs?: true
  }

  export type MetadadosMinAggregateInputType = {
    id?: true
    modelrunUpdatetimeUtc?: true
    nome?: true
    altura?: true
    abreviacaoFusoHorario?: true
    latitude?: true
    modelrunUtc?: true
    longitude?: true
    offsetHorarioUtc?: true
    tempoGeracaoMs?: true
  }

  export type MetadadosMaxAggregateInputType = {
    id?: true
    modelrunUpdatetimeUtc?: true
    nome?: true
    altura?: true
    abreviacaoFusoHorario?: true
    latitude?: true
    modelrunUtc?: true
    longitude?: true
    offsetHorarioUtc?: true
    tempoGeracaoMs?: true
  }

  export type MetadadosCountAggregateInputType = {
    id?: true
    modelrunUpdatetimeUtc?: true
    nome?: true
    altura?: true
    abreviacaoFusoHorario?: true
    latitude?: true
    modelrunUtc?: true
    longitude?: true
    offsetHorarioUtc?: true
    tempoGeracaoMs?: true
    _all?: true
  }

  export type MetadadosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metadados to aggregate.
     */
    where?: MetadadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metadados to fetch.
     */
    orderBy?: MetadadosOrderByWithRelationInput | MetadadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetadadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metadados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metadados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Metadados
    **/
    _count?: true | MetadadosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetadadosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetadadosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetadadosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetadadosMaxAggregateInputType
  }

  export type GetMetadadosAggregateType<T extends MetadadosAggregateArgs> = {
        [P in keyof T & keyof AggregateMetadados]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetadados[P]>
      : GetScalarType<T[P], AggregateMetadados[P]>
  }




  export type MetadadosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetadadosWhereInput
    orderBy?: MetadadosOrderByWithAggregationInput | MetadadosOrderByWithAggregationInput[]
    by: MetadadosScalarFieldEnum[] | MetadadosScalarFieldEnum
    having?: MetadadosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetadadosCountAggregateInputType | true
    _avg?: MetadadosAvgAggregateInputType
    _sum?: MetadadosSumAggregateInputType
    _min?: MetadadosMinAggregateInputType
    _max?: MetadadosMaxAggregateInputType
  }

  export type MetadadosGroupByOutputType = {
    id: number
    modelrunUpdatetimeUtc: Date
    nome: string | null
    altura: number | null
    abreviacaoFusoHorario: string | null
    latitude: number | null
    modelrunUtc: Date
    longitude: number | null
    offsetHorarioUtc: number | null
    tempoGeracaoMs: number | null
    _count: MetadadosCountAggregateOutputType | null
    _avg: MetadadosAvgAggregateOutputType | null
    _sum: MetadadosSumAggregateOutputType | null
    _min: MetadadosMinAggregateOutputType | null
    _max: MetadadosMaxAggregateOutputType | null
  }

  type GetMetadadosGroupByPayload<T extends MetadadosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetadadosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetadadosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetadadosGroupByOutputType[P]>
            : GetScalarType<T[P], MetadadosGroupByOutputType[P]>
        }
      >
    >


  export type MetadadosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelrunUpdatetimeUtc?: boolean
    nome?: boolean
    altura?: boolean
    abreviacaoFusoHorario?: boolean
    latitude?: boolean
    modelrunUtc?: boolean
    longitude?: boolean
    offsetHorarioUtc?: boolean
    tempoGeracaoMs?: boolean
  }, ExtArgs["result"]["metadados"]>

  export type MetadadosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelrunUpdatetimeUtc?: boolean
    nome?: boolean
    altura?: boolean
    abreviacaoFusoHorario?: boolean
    latitude?: boolean
    modelrunUtc?: boolean
    longitude?: boolean
    offsetHorarioUtc?: boolean
    tempoGeracaoMs?: boolean
  }, ExtArgs["result"]["metadados"]>

  export type MetadadosSelectScalar = {
    id?: boolean
    modelrunUpdatetimeUtc?: boolean
    nome?: boolean
    altura?: boolean
    abreviacaoFusoHorario?: boolean
    latitude?: boolean
    modelrunUtc?: boolean
    longitude?: boolean
    offsetHorarioUtc?: boolean
    tempoGeracaoMs?: boolean
  }


  export type $MetadadosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Metadados"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      modelrunUpdatetimeUtc: Date
      nome: string | null
      altura: number | null
      abreviacaoFusoHorario: string | null
      latitude: number | null
      modelrunUtc: Date
      longitude: number | null
      offsetHorarioUtc: number | null
      tempoGeracaoMs: number | null
    }, ExtArgs["result"]["metadados"]>
    composites: {}
  }

  type MetadadosGetPayload<S extends boolean | null | undefined | MetadadosDefaultArgs> = $Result.GetResult<Prisma.$MetadadosPayload, S>

  type MetadadosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MetadadosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetadadosCountAggregateInputType | true
    }

  export interface MetadadosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Metadados'], meta: { name: 'Metadados' } }
    /**
     * Find zero or one Metadados that matches the filter.
     * @param {MetadadosFindUniqueArgs} args - Arguments to find a Metadados
     * @example
     * // Get one Metadados
     * const metadados = await prisma.metadados.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetadadosFindUniqueArgs>(args: SelectSubset<T, MetadadosFindUniqueArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Metadados that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MetadadosFindUniqueOrThrowArgs} args - Arguments to find a Metadados
     * @example
     * // Get one Metadados
     * const metadados = await prisma.metadados.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetadadosFindUniqueOrThrowArgs>(args: SelectSubset<T, MetadadosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Metadados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosFindFirstArgs} args - Arguments to find a Metadados
     * @example
     * // Get one Metadados
     * const metadados = await prisma.metadados.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetadadosFindFirstArgs>(args?: SelectSubset<T, MetadadosFindFirstArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Metadados that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosFindFirstOrThrowArgs} args - Arguments to find a Metadados
     * @example
     * // Get one Metadados
     * const metadados = await prisma.metadados.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetadadosFindFirstOrThrowArgs>(args?: SelectSubset<T, MetadadosFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Metadados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Metadados
     * const metadados = await prisma.metadados.findMany()
     * 
     * // Get first 10 Metadados
     * const metadados = await prisma.metadados.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metadadosWithIdOnly = await prisma.metadados.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetadadosFindManyArgs>(args?: SelectSubset<T, MetadadosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Metadados.
     * @param {MetadadosCreateArgs} args - Arguments to create a Metadados.
     * @example
     * // Create one Metadados
     * const Metadados = await prisma.metadados.create({
     *   data: {
     *     // ... data to create a Metadados
     *   }
     * })
     * 
     */
    create<T extends MetadadosCreateArgs>(args: SelectSubset<T, MetadadosCreateArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Metadados.
     * @param {MetadadosCreateManyArgs} args - Arguments to create many Metadados.
     * @example
     * // Create many Metadados
     * const metadados = await prisma.metadados.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetadadosCreateManyArgs>(args?: SelectSubset<T, MetadadosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Metadados and returns the data saved in the database.
     * @param {MetadadosCreateManyAndReturnArgs} args - Arguments to create many Metadados.
     * @example
     * // Create many Metadados
     * const metadados = await prisma.metadados.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Metadados and only return the `id`
     * const metadadosWithIdOnly = await prisma.metadados.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetadadosCreateManyAndReturnArgs>(args?: SelectSubset<T, MetadadosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Metadados.
     * @param {MetadadosDeleteArgs} args - Arguments to delete one Metadados.
     * @example
     * // Delete one Metadados
     * const Metadados = await prisma.metadados.delete({
     *   where: {
     *     // ... filter to delete one Metadados
     *   }
     * })
     * 
     */
    delete<T extends MetadadosDeleteArgs>(args: SelectSubset<T, MetadadosDeleteArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Metadados.
     * @param {MetadadosUpdateArgs} args - Arguments to update one Metadados.
     * @example
     * // Update one Metadados
     * const metadados = await prisma.metadados.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetadadosUpdateArgs>(args: SelectSubset<T, MetadadosUpdateArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Metadados.
     * @param {MetadadosDeleteManyArgs} args - Arguments to filter Metadados to delete.
     * @example
     * // Delete a few Metadados
     * const { count } = await prisma.metadados.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetadadosDeleteManyArgs>(args?: SelectSubset<T, MetadadosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metadados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Metadados
     * const metadados = await prisma.metadados.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetadadosUpdateManyArgs>(args: SelectSubset<T, MetadadosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Metadados.
     * @param {MetadadosUpsertArgs} args - Arguments to update or create a Metadados.
     * @example
     * // Update or create a Metadados
     * const metadados = await prisma.metadados.upsert({
     *   create: {
     *     // ... data to create a Metadados
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Metadados we want to update
     *   }
     * })
     */
    upsert<T extends MetadadosUpsertArgs>(args: SelectSubset<T, MetadadosUpsertArgs<ExtArgs>>): Prisma__MetadadosClient<$Result.GetResult<Prisma.$MetadadosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Metadados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosCountArgs} args - Arguments to filter Metadados to count.
     * @example
     * // Count the number of Metadados
     * const count = await prisma.metadados.count({
     *   where: {
     *     // ... the filter for the Metadados we want to count
     *   }
     * })
    **/
    count<T extends MetadadosCountArgs>(
      args?: Subset<T, MetadadosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetadadosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Metadados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetadadosAggregateArgs>(args: Subset<T, MetadadosAggregateArgs>): Prisma.PrismaPromise<GetMetadadosAggregateType<T>>

    /**
     * Group by Metadados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetadadosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetadadosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetadadosGroupByArgs['orderBy'] }
        : { orderBy?: MetadadosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetadadosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetadadosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Metadados model
   */
  readonly fields: MetadadosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Metadados.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetadadosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Metadados model
   */ 
  interface MetadadosFieldRefs {
    readonly id: FieldRef<"Metadados", 'Int'>
    readonly modelrunUpdatetimeUtc: FieldRef<"Metadados", 'DateTime'>
    readonly nome: FieldRef<"Metadados", 'String'>
    readonly altura: FieldRef<"Metadados", 'Int'>
    readonly abreviacaoFusoHorario: FieldRef<"Metadados", 'String'>
    readonly latitude: FieldRef<"Metadados", 'Float'>
    readonly modelrunUtc: FieldRef<"Metadados", 'DateTime'>
    readonly longitude: FieldRef<"Metadados", 'Float'>
    readonly offsetHorarioUtc: FieldRef<"Metadados", 'Float'>
    readonly tempoGeracaoMs: FieldRef<"Metadados", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Metadados findUnique
   */
  export type MetadadosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * Filter, which Metadados to fetch.
     */
    where: MetadadosWhereUniqueInput
  }

  /**
   * Metadados findUniqueOrThrow
   */
  export type MetadadosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * Filter, which Metadados to fetch.
     */
    where: MetadadosWhereUniqueInput
  }

  /**
   * Metadados findFirst
   */
  export type MetadadosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * Filter, which Metadados to fetch.
     */
    where?: MetadadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metadados to fetch.
     */
    orderBy?: MetadadosOrderByWithRelationInput | MetadadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metadados.
     */
    cursor?: MetadadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metadados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metadados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metadados.
     */
    distinct?: MetadadosScalarFieldEnum | MetadadosScalarFieldEnum[]
  }

  /**
   * Metadados findFirstOrThrow
   */
  export type MetadadosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * Filter, which Metadados to fetch.
     */
    where?: MetadadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metadados to fetch.
     */
    orderBy?: MetadadosOrderByWithRelationInput | MetadadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metadados.
     */
    cursor?: MetadadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metadados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metadados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metadados.
     */
    distinct?: MetadadosScalarFieldEnum | MetadadosScalarFieldEnum[]
  }

  /**
   * Metadados findMany
   */
  export type MetadadosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * Filter, which Metadados to fetch.
     */
    where?: MetadadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metadados to fetch.
     */
    orderBy?: MetadadosOrderByWithRelationInput | MetadadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Metadados.
     */
    cursor?: MetadadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metadados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metadados.
     */
    skip?: number
    distinct?: MetadadosScalarFieldEnum | MetadadosScalarFieldEnum[]
  }

  /**
   * Metadados create
   */
  export type MetadadosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * The data needed to create a Metadados.
     */
    data: XOR<MetadadosCreateInput, MetadadosUncheckedCreateInput>
  }

  /**
   * Metadados createMany
   */
  export type MetadadosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Metadados.
     */
    data: MetadadosCreateManyInput | MetadadosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Metadados createManyAndReturn
   */
  export type MetadadosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Metadados.
     */
    data: MetadadosCreateManyInput | MetadadosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Metadados update
   */
  export type MetadadosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * The data needed to update a Metadados.
     */
    data: XOR<MetadadosUpdateInput, MetadadosUncheckedUpdateInput>
    /**
     * Choose, which Metadados to update.
     */
    where: MetadadosWhereUniqueInput
  }

  /**
   * Metadados updateMany
   */
  export type MetadadosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Metadados.
     */
    data: XOR<MetadadosUpdateManyMutationInput, MetadadosUncheckedUpdateManyInput>
    /**
     * Filter which Metadados to update
     */
    where?: MetadadosWhereInput
  }

  /**
   * Metadados upsert
   */
  export type MetadadosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * The filter to search for the Metadados to update in case it exists.
     */
    where: MetadadosWhereUniqueInput
    /**
     * In case the Metadados found by the `where` argument doesn't exist, create a new Metadados with this data.
     */
    create: XOR<MetadadosCreateInput, MetadadosUncheckedCreateInput>
    /**
     * In case the Metadados was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetadadosUpdateInput, MetadadosUncheckedUpdateInput>
  }

  /**
   * Metadados delete
   */
  export type MetadadosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
    /**
     * Filter which Metadados to delete.
     */
    where: MetadadosWhereUniqueInput
  }

  /**
   * Metadados deleteMany
   */
  export type MetadadosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metadados to delete
     */
    where?: MetadadosWhereInput
  }

  /**
   * Metadados without action
   */
  export type MetadadosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metadados
     */
    select?: MetadadosSelect<ExtArgs> | null
  }


  /**
   * Model Unidades
   */

  export type AggregateUnidades = {
    _count: UnidadesCountAggregateOutputType | null
    _avg: UnidadesAvgAggregateOutputType | null
    _sum: UnidadesSumAggregateOutputType | null
    _min: UnidadesMinAggregateOutputType | null
    _max: UnidadesMaxAggregateOutputType | null
  }

  export type UnidadesAvgAggregateOutputType = {
    id: number | null
  }

  export type UnidadesSumAggregateOutputType = {
    id: number | null
  }

  export type UnidadesMinAggregateOutputType = {
    id: number | null
    previsibilidade: string | null
    precipitacao: string | null
    velocidadeDoVento: string | null
    probabilidadeDePrecipitacao: string | null
    umidadeRelativa: string | null
    tempo: string | null
    temperatura: string | null
    pressao: string | null
    direcaoDoVento: string | null
  }

  export type UnidadesMaxAggregateOutputType = {
    id: number | null
    previsibilidade: string | null
    precipitacao: string | null
    velocidadeDoVento: string | null
    probabilidadeDePrecipitacao: string | null
    umidadeRelativa: string | null
    tempo: string | null
    temperatura: string | null
    pressao: string | null
    direcaoDoVento: string | null
  }

  export type UnidadesCountAggregateOutputType = {
    id: number
    previsibilidade: number
    precipitacao: number
    velocidadeDoVento: number
    probabilidadeDePrecipitacao: number
    umidadeRelativa: number
    tempo: number
    temperatura: number
    pressao: number
    direcaoDoVento: number
    _all: number
  }


  export type UnidadesAvgAggregateInputType = {
    id?: true
  }

  export type UnidadesSumAggregateInputType = {
    id?: true
  }

  export type UnidadesMinAggregateInputType = {
    id?: true
    previsibilidade?: true
    precipitacao?: true
    velocidadeDoVento?: true
    probabilidadeDePrecipitacao?: true
    umidadeRelativa?: true
    tempo?: true
    temperatura?: true
    pressao?: true
    direcaoDoVento?: true
  }

  export type UnidadesMaxAggregateInputType = {
    id?: true
    previsibilidade?: true
    precipitacao?: true
    velocidadeDoVento?: true
    probabilidadeDePrecipitacao?: true
    umidadeRelativa?: true
    tempo?: true
    temperatura?: true
    pressao?: true
    direcaoDoVento?: true
  }

  export type UnidadesCountAggregateInputType = {
    id?: true
    previsibilidade?: true
    precipitacao?: true
    velocidadeDoVento?: true
    probabilidadeDePrecipitacao?: true
    umidadeRelativa?: true
    tempo?: true
    temperatura?: true
    pressao?: true
    direcaoDoVento?: true
    _all?: true
  }

  export type UnidadesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unidades to aggregate.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Unidades
    **/
    _count?: true | UnidadesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnidadesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnidadesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnidadesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnidadesMaxAggregateInputType
  }

  export type GetUnidadesAggregateType<T extends UnidadesAggregateArgs> = {
        [P in keyof T & keyof AggregateUnidades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnidades[P]>
      : GetScalarType<T[P], AggregateUnidades[P]>
  }




  export type UnidadesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnidadesWhereInput
    orderBy?: UnidadesOrderByWithAggregationInput | UnidadesOrderByWithAggregationInput[]
    by: UnidadesScalarFieldEnum[] | UnidadesScalarFieldEnum
    having?: UnidadesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnidadesCountAggregateInputType | true
    _avg?: UnidadesAvgAggregateInputType
    _sum?: UnidadesSumAggregateInputType
    _min?: UnidadesMinAggregateInputType
    _max?: UnidadesMaxAggregateInputType
  }

  export type UnidadesGroupByOutputType = {
    id: number
    previsibilidade: string | null
    precipitacao: string | null
    velocidadeDoVento: string | null
    probabilidadeDePrecipitacao: string | null
    umidadeRelativa: string | null
    tempo: string | null
    temperatura: string | null
    pressao: string | null
    direcaoDoVento: string | null
    _count: UnidadesCountAggregateOutputType | null
    _avg: UnidadesAvgAggregateOutputType | null
    _sum: UnidadesSumAggregateOutputType | null
    _min: UnidadesMinAggregateOutputType | null
    _max: UnidadesMaxAggregateOutputType | null
  }

  type GetUnidadesGroupByPayload<T extends UnidadesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnidadesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnidadesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnidadesGroupByOutputType[P]>
            : GetScalarType<T[P], UnidadesGroupByOutputType[P]>
        }
      >
    >


  export type UnidadesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    previsibilidade?: boolean
    precipitacao?: boolean
    velocidadeDoVento?: boolean
    probabilidadeDePrecipitacao?: boolean
    umidadeRelativa?: boolean
    tempo?: boolean
    temperatura?: boolean
    pressao?: boolean
    direcaoDoVento?: boolean
  }, ExtArgs["result"]["unidades"]>

  export type UnidadesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    previsibilidade?: boolean
    precipitacao?: boolean
    velocidadeDoVento?: boolean
    probabilidadeDePrecipitacao?: boolean
    umidadeRelativa?: boolean
    tempo?: boolean
    temperatura?: boolean
    pressao?: boolean
    direcaoDoVento?: boolean
  }, ExtArgs["result"]["unidades"]>

  export type UnidadesSelectScalar = {
    id?: boolean
    previsibilidade?: boolean
    precipitacao?: boolean
    velocidadeDoVento?: boolean
    probabilidadeDePrecipitacao?: boolean
    umidadeRelativa?: boolean
    tempo?: boolean
    temperatura?: boolean
    pressao?: boolean
    direcaoDoVento?: boolean
  }


  export type $UnidadesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unidades"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      previsibilidade: string | null
      precipitacao: string | null
      velocidadeDoVento: string | null
      probabilidadeDePrecipitacao: string | null
      umidadeRelativa: string | null
      tempo: string | null
      temperatura: string | null
      pressao: string | null
      direcaoDoVento: string | null
    }, ExtArgs["result"]["unidades"]>
    composites: {}
  }

  type UnidadesGetPayload<S extends boolean | null | undefined | UnidadesDefaultArgs> = $Result.GetResult<Prisma.$UnidadesPayload, S>

  type UnidadesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UnidadesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UnidadesCountAggregateInputType | true
    }

  export interface UnidadesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unidades'], meta: { name: 'Unidades' } }
    /**
     * Find zero or one Unidades that matches the filter.
     * @param {UnidadesFindUniqueArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnidadesFindUniqueArgs>(args: SelectSubset<T, UnidadesFindUniqueArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Unidades that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UnidadesFindUniqueOrThrowArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnidadesFindUniqueOrThrowArgs>(args: SelectSubset<T, UnidadesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Unidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesFindFirstArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnidadesFindFirstArgs>(args?: SelectSubset<T, UnidadesFindFirstArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Unidades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesFindFirstOrThrowArgs} args - Arguments to find a Unidades
     * @example
     * // Get one Unidades
     * const unidades = await prisma.unidades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnidadesFindFirstOrThrowArgs>(args?: SelectSubset<T, UnidadesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Unidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Unidades
     * const unidades = await prisma.unidades.findMany()
     * 
     * // Get first 10 Unidades
     * const unidades = await prisma.unidades.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unidadesWithIdOnly = await prisma.unidades.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnidadesFindManyArgs>(args?: SelectSubset<T, UnidadesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Unidades.
     * @param {UnidadesCreateArgs} args - Arguments to create a Unidades.
     * @example
     * // Create one Unidades
     * const Unidades = await prisma.unidades.create({
     *   data: {
     *     // ... data to create a Unidades
     *   }
     * })
     * 
     */
    create<T extends UnidadesCreateArgs>(args: SelectSubset<T, UnidadesCreateArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Unidades.
     * @param {UnidadesCreateManyArgs} args - Arguments to create many Unidades.
     * @example
     * // Create many Unidades
     * const unidades = await prisma.unidades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnidadesCreateManyArgs>(args?: SelectSubset<T, UnidadesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Unidades and returns the data saved in the database.
     * @param {UnidadesCreateManyAndReturnArgs} args - Arguments to create many Unidades.
     * @example
     * // Create many Unidades
     * const unidades = await prisma.unidades.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Unidades and only return the `id`
     * const unidadesWithIdOnly = await prisma.unidades.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnidadesCreateManyAndReturnArgs>(args?: SelectSubset<T, UnidadesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Unidades.
     * @param {UnidadesDeleteArgs} args - Arguments to delete one Unidades.
     * @example
     * // Delete one Unidades
     * const Unidades = await prisma.unidades.delete({
     *   where: {
     *     // ... filter to delete one Unidades
     *   }
     * })
     * 
     */
    delete<T extends UnidadesDeleteArgs>(args: SelectSubset<T, UnidadesDeleteArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Unidades.
     * @param {UnidadesUpdateArgs} args - Arguments to update one Unidades.
     * @example
     * // Update one Unidades
     * const unidades = await prisma.unidades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnidadesUpdateArgs>(args: SelectSubset<T, UnidadesUpdateArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Unidades.
     * @param {UnidadesDeleteManyArgs} args - Arguments to filter Unidades to delete.
     * @example
     * // Delete a few Unidades
     * const { count } = await prisma.unidades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnidadesDeleteManyArgs>(args?: SelectSubset<T, UnidadesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Unidades
     * const unidades = await prisma.unidades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnidadesUpdateManyArgs>(args: SelectSubset<T, UnidadesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Unidades.
     * @param {UnidadesUpsertArgs} args - Arguments to update or create a Unidades.
     * @example
     * // Update or create a Unidades
     * const unidades = await prisma.unidades.upsert({
     *   create: {
     *     // ... data to create a Unidades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unidades we want to update
     *   }
     * })
     */
    upsert<T extends UnidadesUpsertArgs>(args: SelectSubset<T, UnidadesUpsertArgs<ExtArgs>>): Prisma__UnidadesClient<$Result.GetResult<Prisma.$UnidadesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesCountArgs} args - Arguments to filter Unidades to count.
     * @example
     * // Count the number of Unidades
     * const count = await prisma.unidades.count({
     *   where: {
     *     // ... the filter for the Unidades we want to count
     *   }
     * })
    **/
    count<T extends UnidadesCountArgs>(
      args?: Subset<T, UnidadesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnidadesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnidadesAggregateArgs>(args: Subset<T, UnidadesAggregateArgs>): Prisma.PrismaPromise<GetUnidadesAggregateType<T>>

    /**
     * Group by Unidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnidadesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnidadesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnidadesGroupByArgs['orderBy'] }
        : { orderBy?: UnidadesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnidadesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnidadesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unidades model
   */
  readonly fields: UnidadesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unidades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnidadesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Unidades model
   */ 
  interface UnidadesFieldRefs {
    readonly id: FieldRef<"Unidades", 'Int'>
    readonly previsibilidade: FieldRef<"Unidades", 'String'>
    readonly precipitacao: FieldRef<"Unidades", 'String'>
    readonly velocidadeDoVento: FieldRef<"Unidades", 'String'>
    readonly probabilidadeDePrecipitacao: FieldRef<"Unidades", 'String'>
    readonly umidadeRelativa: FieldRef<"Unidades", 'String'>
    readonly tempo: FieldRef<"Unidades", 'String'>
    readonly temperatura: FieldRef<"Unidades", 'String'>
    readonly pressao: FieldRef<"Unidades", 'String'>
    readonly direcaoDoVento: FieldRef<"Unidades", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Unidades findUnique
   */
  export type UnidadesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where: UnidadesWhereUniqueInput
  }

  /**
   * Unidades findUniqueOrThrow
   */
  export type UnidadesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where: UnidadesWhereUniqueInput
  }

  /**
   * Unidades findFirst
   */
  export type UnidadesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Unidades.
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Unidades.
     */
    distinct?: UnidadesScalarFieldEnum | UnidadesScalarFieldEnum[]
  }

  /**
   * Unidades findFirstOrThrow
   */
  export type UnidadesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Unidades.
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Unidades.
     */
    distinct?: UnidadesScalarFieldEnum | UnidadesScalarFieldEnum[]
  }

  /**
   * Unidades findMany
   */
  export type UnidadesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter, which Unidades to fetch.
     */
    where?: UnidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unidades to fetch.
     */
    orderBy?: UnidadesOrderByWithRelationInput | UnidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Unidades.
     */
    cursor?: UnidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unidades.
     */
    skip?: number
    distinct?: UnidadesScalarFieldEnum | UnidadesScalarFieldEnum[]
  }

  /**
   * Unidades create
   */
  export type UnidadesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * The data needed to create a Unidades.
     */
    data?: XOR<UnidadesCreateInput, UnidadesUncheckedCreateInput>
  }

  /**
   * Unidades createMany
   */
  export type UnidadesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Unidades.
     */
    data: UnidadesCreateManyInput | UnidadesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unidades createManyAndReturn
   */
  export type UnidadesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Unidades.
     */
    data: UnidadesCreateManyInput | UnidadesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unidades update
   */
  export type UnidadesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * The data needed to update a Unidades.
     */
    data: XOR<UnidadesUpdateInput, UnidadesUncheckedUpdateInput>
    /**
     * Choose, which Unidades to update.
     */
    where: UnidadesWhereUniqueInput
  }

  /**
   * Unidades updateMany
   */
  export type UnidadesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Unidades.
     */
    data: XOR<UnidadesUpdateManyMutationInput, UnidadesUncheckedUpdateManyInput>
    /**
     * Filter which Unidades to update
     */
    where?: UnidadesWhereInput
  }

  /**
   * Unidades upsert
   */
  export type UnidadesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * The filter to search for the Unidades to update in case it exists.
     */
    where: UnidadesWhereUniqueInput
    /**
     * In case the Unidades found by the `where` argument doesn't exist, create a new Unidades with this data.
     */
    create: XOR<UnidadesCreateInput, UnidadesUncheckedCreateInput>
    /**
     * In case the Unidades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnidadesUpdateInput, UnidadesUncheckedUpdateInput>
  }

  /**
   * Unidades delete
   */
  export type UnidadesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
    /**
     * Filter which Unidades to delete.
     */
    where: UnidadesWhereUniqueInput
  }

  /**
   * Unidades deleteMany
   */
  export type UnidadesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unidades to delete
     */
    where?: UnidadesWhereInput
  }

  /**
   * Unidades without action
   */
  export type UnidadesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unidades
     */
    select?: UnidadesSelect<ExtArgs> | null
  }


  /**
   * Model DadosAtuais
   */

  export type AggregateDadosAtuais = {
    _count: DadosAtuaisCountAggregateOutputType | null
    _avg: DadosAtuaisAvgAggregateOutputType | null
    _sum: DadosAtuaisSumAggregateOutputType | null
    _min: DadosAtuaisMinAggregateOutputType | null
    _max: DadosAtuaisMaxAggregateOutputType | null
  }

  export type DadosAtuaisAvgAggregateOutputType = {
    id: number | null
    velocidadeDoVento: number | null
    anguloDeZenite: number | null
    pictocodeDetalhado: number | null
    pictocode: number | null
    temperatura: number | null
  }

  export type DadosAtuaisSumAggregateOutputType = {
    id: number | null
    velocidadeDoVento: number | null
    anguloDeZenite: number | null
    pictocodeDetalhado: number | null
    pictocode: number | null
    temperatura: number | null
  }

  export type DadosAtuaisMinAggregateOutputType = {
    id: number | null
    tempo: Date | null
    dadosObservados: boolean | null
    metarid: string | null
    ehDia: boolean | null
    velocidadeDoVento: number | null
    anguloDeZenite: number | null
    pictocodeDetalhado: number | null
    pictocode: number | null
    temperatura: number | null
  }

  export type DadosAtuaisMaxAggregateOutputType = {
    id: number | null
    tempo: Date | null
    dadosObservados: boolean | null
    metarid: string | null
    ehDia: boolean | null
    velocidadeDoVento: number | null
    anguloDeZenite: number | null
    pictocodeDetalhado: number | null
    pictocode: number | null
    temperatura: number | null
  }

  export type DadosAtuaisCountAggregateOutputType = {
    id: number
    tempo: number
    dadosObservados: number
    metarid: number
    ehDia: number
    velocidadeDoVento: number
    anguloDeZenite: number
    pictocodeDetalhado: number
    pictocode: number
    temperatura: number
    _all: number
  }


  export type DadosAtuaisAvgAggregateInputType = {
    id?: true
    velocidadeDoVento?: true
    anguloDeZenite?: true
    pictocodeDetalhado?: true
    pictocode?: true
    temperatura?: true
  }

  export type DadosAtuaisSumAggregateInputType = {
    id?: true
    velocidadeDoVento?: true
    anguloDeZenite?: true
    pictocodeDetalhado?: true
    pictocode?: true
    temperatura?: true
  }

  export type DadosAtuaisMinAggregateInputType = {
    id?: true
    tempo?: true
    dadosObservados?: true
    metarid?: true
    ehDia?: true
    velocidadeDoVento?: true
    anguloDeZenite?: true
    pictocodeDetalhado?: true
    pictocode?: true
    temperatura?: true
  }

  export type DadosAtuaisMaxAggregateInputType = {
    id?: true
    tempo?: true
    dadosObservados?: true
    metarid?: true
    ehDia?: true
    velocidadeDoVento?: true
    anguloDeZenite?: true
    pictocodeDetalhado?: true
    pictocode?: true
    temperatura?: true
  }

  export type DadosAtuaisCountAggregateInputType = {
    id?: true
    tempo?: true
    dadosObservados?: true
    metarid?: true
    ehDia?: true
    velocidadeDoVento?: true
    anguloDeZenite?: true
    pictocodeDetalhado?: true
    pictocode?: true
    temperatura?: true
    _all?: true
  }

  export type DadosAtuaisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DadosAtuais to aggregate.
     */
    where?: DadosAtuaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosAtuais to fetch.
     */
    orderBy?: DadosAtuaisOrderByWithRelationInput | DadosAtuaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DadosAtuaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosAtuais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosAtuais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DadosAtuais
    **/
    _count?: true | DadosAtuaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DadosAtuaisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DadosAtuaisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DadosAtuaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DadosAtuaisMaxAggregateInputType
  }

  export type GetDadosAtuaisAggregateType<T extends DadosAtuaisAggregateArgs> = {
        [P in keyof T & keyof AggregateDadosAtuais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDadosAtuais[P]>
      : GetScalarType<T[P], AggregateDadosAtuais[P]>
  }




  export type DadosAtuaisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DadosAtuaisWhereInput
    orderBy?: DadosAtuaisOrderByWithAggregationInput | DadosAtuaisOrderByWithAggregationInput[]
    by: DadosAtuaisScalarFieldEnum[] | DadosAtuaisScalarFieldEnum
    having?: DadosAtuaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DadosAtuaisCountAggregateInputType | true
    _avg?: DadosAtuaisAvgAggregateInputType
    _sum?: DadosAtuaisSumAggregateInputType
    _min?: DadosAtuaisMinAggregateInputType
    _max?: DadosAtuaisMaxAggregateInputType
  }

  export type DadosAtuaisGroupByOutputType = {
    id: number
    tempo: Date
    dadosObservados: boolean | null
    metarid: string | null
    ehDia: boolean | null
    velocidadeDoVento: number | null
    anguloDeZenite: number | null
    pictocodeDetalhado: number | null
    pictocode: number | null
    temperatura: number | null
    _count: DadosAtuaisCountAggregateOutputType | null
    _avg: DadosAtuaisAvgAggregateOutputType | null
    _sum: DadosAtuaisSumAggregateOutputType | null
    _min: DadosAtuaisMinAggregateOutputType | null
    _max: DadosAtuaisMaxAggregateOutputType | null
  }

  type GetDadosAtuaisGroupByPayload<T extends DadosAtuaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DadosAtuaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DadosAtuaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DadosAtuaisGroupByOutputType[P]>
            : GetScalarType<T[P], DadosAtuaisGroupByOutputType[P]>
        }
      >
    >


  export type DadosAtuaisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tempo?: boolean
    dadosObservados?: boolean
    metarid?: boolean
    ehDia?: boolean
    velocidadeDoVento?: boolean
    anguloDeZenite?: boolean
    pictocodeDetalhado?: boolean
    pictocode?: boolean
    temperatura?: boolean
  }, ExtArgs["result"]["dadosAtuais"]>

  export type DadosAtuaisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tempo?: boolean
    dadosObservados?: boolean
    metarid?: boolean
    ehDia?: boolean
    velocidadeDoVento?: boolean
    anguloDeZenite?: boolean
    pictocodeDetalhado?: boolean
    pictocode?: boolean
    temperatura?: boolean
  }, ExtArgs["result"]["dadosAtuais"]>

  export type DadosAtuaisSelectScalar = {
    id?: boolean
    tempo?: boolean
    dadosObservados?: boolean
    metarid?: boolean
    ehDia?: boolean
    velocidadeDoVento?: boolean
    anguloDeZenite?: boolean
    pictocodeDetalhado?: boolean
    pictocode?: boolean
    temperatura?: boolean
  }


  export type $DadosAtuaisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DadosAtuais"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tempo: Date
      dadosObservados: boolean | null
      metarid: string | null
      ehDia: boolean | null
      velocidadeDoVento: number | null
      anguloDeZenite: number | null
      pictocodeDetalhado: number | null
      pictocode: number | null
      temperatura: number | null
    }, ExtArgs["result"]["dadosAtuais"]>
    composites: {}
  }

  type DadosAtuaisGetPayload<S extends boolean | null | undefined | DadosAtuaisDefaultArgs> = $Result.GetResult<Prisma.$DadosAtuaisPayload, S>

  type DadosAtuaisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DadosAtuaisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DadosAtuaisCountAggregateInputType | true
    }

  export interface DadosAtuaisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DadosAtuais'], meta: { name: 'DadosAtuais' } }
    /**
     * Find zero or one DadosAtuais that matches the filter.
     * @param {DadosAtuaisFindUniqueArgs} args - Arguments to find a DadosAtuais
     * @example
     * // Get one DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DadosAtuaisFindUniqueArgs>(args: SelectSubset<T, DadosAtuaisFindUniqueArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DadosAtuais that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DadosAtuaisFindUniqueOrThrowArgs} args - Arguments to find a DadosAtuais
     * @example
     * // Get one DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DadosAtuaisFindUniqueOrThrowArgs>(args: SelectSubset<T, DadosAtuaisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DadosAtuais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisFindFirstArgs} args - Arguments to find a DadosAtuais
     * @example
     * // Get one DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DadosAtuaisFindFirstArgs>(args?: SelectSubset<T, DadosAtuaisFindFirstArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DadosAtuais that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisFindFirstOrThrowArgs} args - Arguments to find a DadosAtuais
     * @example
     * // Get one DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DadosAtuaisFindFirstOrThrowArgs>(args?: SelectSubset<T, DadosAtuaisFindFirstOrThrowArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DadosAtuais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.findMany()
     * 
     * // Get first 10 DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dadosAtuaisWithIdOnly = await prisma.dadosAtuais.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DadosAtuaisFindManyArgs>(args?: SelectSubset<T, DadosAtuaisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DadosAtuais.
     * @param {DadosAtuaisCreateArgs} args - Arguments to create a DadosAtuais.
     * @example
     * // Create one DadosAtuais
     * const DadosAtuais = await prisma.dadosAtuais.create({
     *   data: {
     *     // ... data to create a DadosAtuais
     *   }
     * })
     * 
     */
    create<T extends DadosAtuaisCreateArgs>(args: SelectSubset<T, DadosAtuaisCreateArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DadosAtuais.
     * @param {DadosAtuaisCreateManyArgs} args - Arguments to create many DadosAtuais.
     * @example
     * // Create many DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DadosAtuaisCreateManyArgs>(args?: SelectSubset<T, DadosAtuaisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DadosAtuais and returns the data saved in the database.
     * @param {DadosAtuaisCreateManyAndReturnArgs} args - Arguments to create many DadosAtuais.
     * @example
     * // Create many DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DadosAtuais and only return the `id`
     * const dadosAtuaisWithIdOnly = await prisma.dadosAtuais.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DadosAtuaisCreateManyAndReturnArgs>(args?: SelectSubset<T, DadosAtuaisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DadosAtuais.
     * @param {DadosAtuaisDeleteArgs} args - Arguments to delete one DadosAtuais.
     * @example
     * // Delete one DadosAtuais
     * const DadosAtuais = await prisma.dadosAtuais.delete({
     *   where: {
     *     // ... filter to delete one DadosAtuais
     *   }
     * })
     * 
     */
    delete<T extends DadosAtuaisDeleteArgs>(args: SelectSubset<T, DadosAtuaisDeleteArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DadosAtuais.
     * @param {DadosAtuaisUpdateArgs} args - Arguments to update one DadosAtuais.
     * @example
     * // Update one DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DadosAtuaisUpdateArgs>(args: SelectSubset<T, DadosAtuaisUpdateArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DadosAtuais.
     * @param {DadosAtuaisDeleteManyArgs} args - Arguments to filter DadosAtuais to delete.
     * @example
     * // Delete a few DadosAtuais
     * const { count } = await prisma.dadosAtuais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DadosAtuaisDeleteManyArgs>(args?: SelectSubset<T, DadosAtuaisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DadosAtuais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DadosAtuaisUpdateManyArgs>(args: SelectSubset<T, DadosAtuaisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DadosAtuais.
     * @param {DadosAtuaisUpsertArgs} args - Arguments to update or create a DadosAtuais.
     * @example
     * // Update or create a DadosAtuais
     * const dadosAtuais = await prisma.dadosAtuais.upsert({
     *   create: {
     *     // ... data to create a DadosAtuais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DadosAtuais we want to update
     *   }
     * })
     */
    upsert<T extends DadosAtuaisUpsertArgs>(args: SelectSubset<T, DadosAtuaisUpsertArgs<ExtArgs>>): Prisma__DadosAtuaisClient<$Result.GetResult<Prisma.$DadosAtuaisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DadosAtuais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisCountArgs} args - Arguments to filter DadosAtuais to count.
     * @example
     * // Count the number of DadosAtuais
     * const count = await prisma.dadosAtuais.count({
     *   where: {
     *     // ... the filter for the DadosAtuais we want to count
     *   }
     * })
    **/
    count<T extends DadosAtuaisCountArgs>(
      args?: Subset<T, DadosAtuaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DadosAtuaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DadosAtuais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DadosAtuaisAggregateArgs>(args: Subset<T, DadosAtuaisAggregateArgs>): Prisma.PrismaPromise<GetDadosAtuaisAggregateType<T>>

    /**
     * Group by DadosAtuais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAtuaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DadosAtuaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DadosAtuaisGroupByArgs['orderBy'] }
        : { orderBy?: DadosAtuaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DadosAtuaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDadosAtuaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DadosAtuais model
   */
  readonly fields: DadosAtuaisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DadosAtuais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DadosAtuaisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DadosAtuais model
   */ 
  interface DadosAtuaisFieldRefs {
    readonly id: FieldRef<"DadosAtuais", 'Int'>
    readonly tempo: FieldRef<"DadosAtuais", 'DateTime'>
    readonly dadosObservados: FieldRef<"DadosAtuais", 'Boolean'>
    readonly metarid: FieldRef<"DadosAtuais", 'String'>
    readonly ehDia: FieldRef<"DadosAtuais", 'Boolean'>
    readonly velocidadeDoVento: FieldRef<"DadosAtuais", 'Float'>
    readonly anguloDeZenite: FieldRef<"DadosAtuais", 'Float'>
    readonly pictocodeDetalhado: FieldRef<"DadosAtuais", 'Int'>
    readonly pictocode: FieldRef<"DadosAtuais", 'Int'>
    readonly temperatura: FieldRef<"DadosAtuais", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * DadosAtuais findUnique
   */
  export type DadosAtuaisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * Filter, which DadosAtuais to fetch.
     */
    where: DadosAtuaisWhereUniqueInput
  }

  /**
   * DadosAtuais findUniqueOrThrow
   */
  export type DadosAtuaisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * Filter, which DadosAtuais to fetch.
     */
    where: DadosAtuaisWhereUniqueInput
  }

  /**
   * DadosAtuais findFirst
   */
  export type DadosAtuaisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * Filter, which DadosAtuais to fetch.
     */
    where?: DadosAtuaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosAtuais to fetch.
     */
    orderBy?: DadosAtuaisOrderByWithRelationInput | DadosAtuaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DadosAtuais.
     */
    cursor?: DadosAtuaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosAtuais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosAtuais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DadosAtuais.
     */
    distinct?: DadosAtuaisScalarFieldEnum | DadosAtuaisScalarFieldEnum[]
  }

  /**
   * DadosAtuais findFirstOrThrow
   */
  export type DadosAtuaisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * Filter, which DadosAtuais to fetch.
     */
    where?: DadosAtuaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosAtuais to fetch.
     */
    orderBy?: DadosAtuaisOrderByWithRelationInput | DadosAtuaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DadosAtuais.
     */
    cursor?: DadosAtuaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosAtuais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosAtuais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DadosAtuais.
     */
    distinct?: DadosAtuaisScalarFieldEnum | DadosAtuaisScalarFieldEnum[]
  }

  /**
   * DadosAtuais findMany
   */
  export type DadosAtuaisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * Filter, which DadosAtuais to fetch.
     */
    where?: DadosAtuaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosAtuais to fetch.
     */
    orderBy?: DadosAtuaisOrderByWithRelationInput | DadosAtuaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DadosAtuais.
     */
    cursor?: DadosAtuaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosAtuais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosAtuais.
     */
    skip?: number
    distinct?: DadosAtuaisScalarFieldEnum | DadosAtuaisScalarFieldEnum[]
  }

  /**
   * DadosAtuais create
   */
  export type DadosAtuaisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * The data needed to create a DadosAtuais.
     */
    data: XOR<DadosAtuaisCreateInput, DadosAtuaisUncheckedCreateInput>
  }

  /**
   * DadosAtuais createMany
   */
  export type DadosAtuaisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DadosAtuais.
     */
    data: DadosAtuaisCreateManyInput | DadosAtuaisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DadosAtuais createManyAndReturn
   */
  export type DadosAtuaisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DadosAtuais.
     */
    data: DadosAtuaisCreateManyInput | DadosAtuaisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DadosAtuais update
   */
  export type DadosAtuaisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * The data needed to update a DadosAtuais.
     */
    data: XOR<DadosAtuaisUpdateInput, DadosAtuaisUncheckedUpdateInput>
    /**
     * Choose, which DadosAtuais to update.
     */
    where: DadosAtuaisWhereUniqueInput
  }

  /**
   * DadosAtuais updateMany
   */
  export type DadosAtuaisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DadosAtuais.
     */
    data: XOR<DadosAtuaisUpdateManyMutationInput, DadosAtuaisUncheckedUpdateManyInput>
    /**
     * Filter which DadosAtuais to update
     */
    where?: DadosAtuaisWhereInput
  }

  /**
   * DadosAtuais upsert
   */
  export type DadosAtuaisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * The filter to search for the DadosAtuais to update in case it exists.
     */
    where: DadosAtuaisWhereUniqueInput
    /**
     * In case the DadosAtuais found by the `where` argument doesn't exist, create a new DadosAtuais with this data.
     */
    create: XOR<DadosAtuaisCreateInput, DadosAtuaisUncheckedCreateInput>
    /**
     * In case the DadosAtuais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DadosAtuaisUpdateInput, DadosAtuaisUncheckedUpdateInput>
  }

  /**
   * DadosAtuais delete
   */
  export type DadosAtuaisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
    /**
     * Filter which DadosAtuais to delete.
     */
    where: DadosAtuaisWhereUniqueInput
  }

  /**
   * DadosAtuais deleteMany
   */
  export type DadosAtuaisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DadosAtuais to delete
     */
    where?: DadosAtuaisWhereInput
  }

  /**
   * DadosAtuais without action
   */
  export type DadosAtuaisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosAtuais
     */
    select?: DadosAtuaisSelect<ExtArgs> | null
  }


  /**
   * Model DadosDiarios
   */

  export type AggregateDadosDiarios = {
    _count: DadosDiariosCountAggregateOutputType | null
    _avg: DadosDiariosAvgAggregateOutputType | null
    _sum: DadosDiariosSumAggregateOutputType | null
    _min: DadosDiariosMinAggregateOutputType | null
    _max: DadosDiariosMaxAggregateOutputType | null
  }

  export type DadosDiariosAvgAggregateOutputType = {
    id: number | null
    temperaturaInstantanea: number | null
    precipitacao: number | null
    previsibilidade: number | null
    temperaturaMaxima: number | null
    pressaoMediaNivelDoMar: number | null
    velocidadeDoVentoMedia: number | null
    horasDePrecipitacao: number | null
    pressaoMinimaNivelDoMar: number | null
    pictocode: number | null
    fracaoDeNeve: number | null
    horasComUmidadeMaior90: number | null
    precipitacaoConvectiva: number | null
    umidadeRelativaMaxima: number | null
    temperaturaMinima: number | null
    direcaoDoVento: number | null
    temperaturaSensacaoMaxima: number | null
    umidadeRelativaMinima: number | null
    temperaturaSensacaoMedia: number | null
    velocidadeDoVentoMinima: number | null
    temperaturaSensacaoMinima: number | null
    probabilidadeDePrecipitacao: number | null
    indiceUv: number | null
    temperaturaMedia: number | null
    pressaoMaximaNivelDoMar: number | null
    umidadeRelativaMedia: number | null
    classeDePrevisibilidade: number | null
    velocidadeDoVentoMaxima: number | null
  }

  export type DadosDiariosSumAggregateOutputType = {
    id: number | null
    temperaturaInstantanea: number | null
    precipitacao: number | null
    previsibilidade: number | null
    temperaturaMaxima: number | null
    pressaoMediaNivelDoMar: number | null
    velocidadeDoVentoMedia: number | null
    horasDePrecipitacao: number | null
    pressaoMinimaNivelDoMar: number | null
    pictocode: number | null
    fracaoDeNeve: number | null
    horasComUmidadeMaior90: number | null
    precipitacaoConvectiva: number | null
    umidadeRelativaMaxima: number | null
    temperaturaMinima: number | null
    direcaoDoVento: number | null
    temperaturaSensacaoMaxima: number | null
    umidadeRelativaMinima: number | null
    temperaturaSensacaoMedia: number | null
    velocidadeDoVentoMinima: number | null
    temperaturaSensacaoMinima: number | null
    probabilidadeDePrecipitacao: number | null
    indiceUv: number | null
    temperaturaMedia: number | null
    pressaoMaximaNivelDoMar: number | null
    umidadeRelativaMedia: number | null
    classeDePrevisibilidade: number | null
    velocidadeDoVentoMaxima: number | null
  }

  export type DadosDiariosMinAggregateOutputType = {
    id: number | null
    tempo: Date | null
    temperaturaInstantanea: number | null
    precipitacao: number | null
    previsibilidade: number | null
    temperaturaMaxima: number | null
    pressaoMediaNivelDoMar: number | null
    velocidadeDoVentoMedia: number | null
    horasDePrecipitacao: number | null
    pressaoMinimaNivelDoMar: number | null
    pictocode: number | null
    fracaoDeNeve: number | null
    horasComUmidadeMaior90: number | null
    precipitacaoConvectiva: number | null
    umidadeRelativaMaxima: number | null
    temperaturaMinima: number | null
    direcaoDoVento: number | null
    temperaturaSensacaoMaxima: number | null
    umidadeRelativaMinima: number | null
    temperaturaSensacaoMedia: number | null
    velocidadeDoVentoMinima: number | null
    temperaturaSensacaoMinima: number | null
    probabilidadeDePrecipitacao: number | null
    indiceUv: number | null
    manchasDeChuva: string | null
    temperaturaMedia: number | null
    pressaoMaximaNivelDoMar: number | null
    umidadeRelativaMedia: number | null
    classeDePrevisibilidade: number | null
    velocidadeDoVentoMaxima: number | null
  }

  export type DadosDiariosMaxAggregateOutputType = {
    id: number | null
    tempo: Date | null
    temperaturaInstantanea: number | null
    precipitacao: number | null
    previsibilidade: number | null
    temperaturaMaxima: number | null
    pressaoMediaNivelDoMar: number | null
    velocidadeDoVentoMedia: number | null
    horasDePrecipitacao: number | null
    pressaoMinimaNivelDoMar: number | null
    pictocode: number | null
    fracaoDeNeve: number | null
    horasComUmidadeMaior90: number | null
    precipitacaoConvectiva: number | null
    umidadeRelativaMaxima: number | null
    temperaturaMinima: number | null
    direcaoDoVento: number | null
    temperaturaSensacaoMaxima: number | null
    umidadeRelativaMinima: number | null
    temperaturaSensacaoMedia: number | null
    velocidadeDoVentoMinima: number | null
    temperaturaSensacaoMinima: number | null
    probabilidadeDePrecipitacao: number | null
    indiceUv: number | null
    manchasDeChuva: string | null
    temperaturaMedia: number | null
    pressaoMaximaNivelDoMar: number | null
    umidadeRelativaMedia: number | null
    classeDePrevisibilidade: number | null
    velocidadeDoVentoMaxima: number | null
  }

  export type DadosDiariosCountAggregateOutputType = {
    id: number
    tempo: number
    temperaturaInstantanea: number
    precipitacao: number
    previsibilidade: number
    temperaturaMaxima: number
    pressaoMediaNivelDoMar: number
    velocidadeDoVentoMedia: number
    horasDePrecipitacao: number
    pressaoMinimaNivelDoMar: number
    pictocode: number
    fracaoDeNeve: number
    horasComUmidadeMaior90: number
    precipitacaoConvectiva: number
    umidadeRelativaMaxima: number
    temperaturaMinima: number
    direcaoDoVento: number
    temperaturaSensacaoMaxima: number
    umidadeRelativaMinima: number
    temperaturaSensacaoMedia: number
    velocidadeDoVentoMinima: number
    temperaturaSensacaoMinima: number
    probabilidadeDePrecipitacao: number
    indiceUv: number
    manchasDeChuva: number
    temperaturaMedia: number
    pressaoMaximaNivelDoMar: number
    umidadeRelativaMedia: number
    classeDePrevisibilidade: number
    velocidadeDoVentoMaxima: number
    _all: number
  }


  export type DadosDiariosAvgAggregateInputType = {
    id?: true
    temperaturaInstantanea?: true
    precipitacao?: true
    previsibilidade?: true
    temperaturaMaxima?: true
    pressaoMediaNivelDoMar?: true
    velocidadeDoVentoMedia?: true
    horasDePrecipitacao?: true
    pressaoMinimaNivelDoMar?: true
    pictocode?: true
    fracaoDeNeve?: true
    horasComUmidadeMaior90?: true
    precipitacaoConvectiva?: true
    umidadeRelativaMaxima?: true
    temperaturaMinima?: true
    direcaoDoVento?: true
    temperaturaSensacaoMaxima?: true
    umidadeRelativaMinima?: true
    temperaturaSensacaoMedia?: true
    velocidadeDoVentoMinima?: true
    temperaturaSensacaoMinima?: true
    probabilidadeDePrecipitacao?: true
    indiceUv?: true
    temperaturaMedia?: true
    pressaoMaximaNivelDoMar?: true
    umidadeRelativaMedia?: true
    classeDePrevisibilidade?: true
    velocidadeDoVentoMaxima?: true
  }

  export type DadosDiariosSumAggregateInputType = {
    id?: true
    temperaturaInstantanea?: true
    precipitacao?: true
    previsibilidade?: true
    temperaturaMaxima?: true
    pressaoMediaNivelDoMar?: true
    velocidadeDoVentoMedia?: true
    horasDePrecipitacao?: true
    pressaoMinimaNivelDoMar?: true
    pictocode?: true
    fracaoDeNeve?: true
    horasComUmidadeMaior90?: true
    precipitacaoConvectiva?: true
    umidadeRelativaMaxima?: true
    temperaturaMinima?: true
    direcaoDoVento?: true
    temperaturaSensacaoMaxima?: true
    umidadeRelativaMinima?: true
    temperaturaSensacaoMedia?: true
    velocidadeDoVentoMinima?: true
    temperaturaSensacaoMinima?: true
    probabilidadeDePrecipitacao?: true
    indiceUv?: true
    temperaturaMedia?: true
    pressaoMaximaNivelDoMar?: true
    umidadeRelativaMedia?: true
    classeDePrevisibilidade?: true
    velocidadeDoVentoMaxima?: true
  }

  export type DadosDiariosMinAggregateInputType = {
    id?: true
    tempo?: true
    temperaturaInstantanea?: true
    precipitacao?: true
    previsibilidade?: true
    temperaturaMaxima?: true
    pressaoMediaNivelDoMar?: true
    velocidadeDoVentoMedia?: true
    horasDePrecipitacao?: true
    pressaoMinimaNivelDoMar?: true
    pictocode?: true
    fracaoDeNeve?: true
    horasComUmidadeMaior90?: true
    precipitacaoConvectiva?: true
    umidadeRelativaMaxima?: true
    temperaturaMinima?: true
    direcaoDoVento?: true
    temperaturaSensacaoMaxima?: true
    umidadeRelativaMinima?: true
    temperaturaSensacaoMedia?: true
    velocidadeDoVentoMinima?: true
    temperaturaSensacaoMinima?: true
    probabilidadeDePrecipitacao?: true
    indiceUv?: true
    manchasDeChuva?: true
    temperaturaMedia?: true
    pressaoMaximaNivelDoMar?: true
    umidadeRelativaMedia?: true
    classeDePrevisibilidade?: true
    velocidadeDoVentoMaxima?: true
  }

  export type DadosDiariosMaxAggregateInputType = {
    id?: true
    tempo?: true
    temperaturaInstantanea?: true
    precipitacao?: true
    previsibilidade?: true
    temperaturaMaxima?: true
    pressaoMediaNivelDoMar?: true
    velocidadeDoVentoMedia?: true
    horasDePrecipitacao?: true
    pressaoMinimaNivelDoMar?: true
    pictocode?: true
    fracaoDeNeve?: true
    horasComUmidadeMaior90?: true
    precipitacaoConvectiva?: true
    umidadeRelativaMaxima?: true
    temperaturaMinima?: true
    direcaoDoVento?: true
    temperaturaSensacaoMaxima?: true
    umidadeRelativaMinima?: true
    temperaturaSensacaoMedia?: true
    velocidadeDoVentoMinima?: true
    temperaturaSensacaoMinima?: true
    probabilidadeDePrecipitacao?: true
    indiceUv?: true
    manchasDeChuva?: true
    temperaturaMedia?: true
    pressaoMaximaNivelDoMar?: true
    umidadeRelativaMedia?: true
    classeDePrevisibilidade?: true
    velocidadeDoVentoMaxima?: true
  }

  export type DadosDiariosCountAggregateInputType = {
    id?: true
    tempo?: true
    temperaturaInstantanea?: true
    precipitacao?: true
    previsibilidade?: true
    temperaturaMaxima?: true
    pressaoMediaNivelDoMar?: true
    velocidadeDoVentoMedia?: true
    horasDePrecipitacao?: true
    pressaoMinimaNivelDoMar?: true
    pictocode?: true
    fracaoDeNeve?: true
    horasComUmidadeMaior90?: true
    precipitacaoConvectiva?: true
    umidadeRelativaMaxima?: true
    temperaturaMinima?: true
    direcaoDoVento?: true
    temperaturaSensacaoMaxima?: true
    umidadeRelativaMinima?: true
    temperaturaSensacaoMedia?: true
    velocidadeDoVentoMinima?: true
    temperaturaSensacaoMinima?: true
    probabilidadeDePrecipitacao?: true
    indiceUv?: true
    manchasDeChuva?: true
    temperaturaMedia?: true
    pressaoMaximaNivelDoMar?: true
    umidadeRelativaMedia?: true
    classeDePrevisibilidade?: true
    velocidadeDoVentoMaxima?: true
    _all?: true
  }

  export type DadosDiariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DadosDiarios to aggregate.
     */
    where?: DadosDiariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosDiarios to fetch.
     */
    orderBy?: DadosDiariosOrderByWithRelationInput | DadosDiariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DadosDiariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosDiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosDiarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DadosDiarios
    **/
    _count?: true | DadosDiariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DadosDiariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DadosDiariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DadosDiariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DadosDiariosMaxAggregateInputType
  }

  export type GetDadosDiariosAggregateType<T extends DadosDiariosAggregateArgs> = {
        [P in keyof T & keyof AggregateDadosDiarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDadosDiarios[P]>
      : GetScalarType<T[P], AggregateDadosDiarios[P]>
  }




  export type DadosDiariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DadosDiariosWhereInput
    orderBy?: DadosDiariosOrderByWithAggregationInput | DadosDiariosOrderByWithAggregationInput[]
    by: DadosDiariosScalarFieldEnum[] | DadosDiariosScalarFieldEnum
    having?: DadosDiariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DadosDiariosCountAggregateInputType | true
    _avg?: DadosDiariosAvgAggregateInputType
    _sum?: DadosDiariosSumAggregateInputType
    _min?: DadosDiariosMinAggregateInputType
    _max?: DadosDiariosMaxAggregateInputType
  }

  export type DadosDiariosGroupByOutputType = {
    id: number
    tempo: Date
    temperaturaInstantanea: number | null
    precipitacao: number | null
    previsibilidade: number | null
    temperaturaMaxima: number | null
    pressaoMediaNivelDoMar: number | null
    velocidadeDoVentoMedia: number | null
    horasDePrecipitacao: number | null
    pressaoMinimaNivelDoMar: number | null
    pictocode: number | null
    fracaoDeNeve: number | null
    horasComUmidadeMaior90: number | null
    precipitacaoConvectiva: number | null
    umidadeRelativaMaxima: number | null
    temperaturaMinima: number | null
    direcaoDoVento: number | null
    temperaturaSensacaoMaxima: number | null
    umidadeRelativaMinima: number | null
    temperaturaSensacaoMedia: number | null
    velocidadeDoVentoMinima: number | null
    temperaturaSensacaoMinima: number | null
    probabilidadeDePrecipitacao: number | null
    indiceUv: number | null
    manchasDeChuva: string | null
    temperaturaMedia: number | null
    pressaoMaximaNivelDoMar: number | null
    umidadeRelativaMedia: number | null
    classeDePrevisibilidade: number | null
    velocidadeDoVentoMaxima: number | null
    _count: DadosDiariosCountAggregateOutputType | null
    _avg: DadosDiariosAvgAggregateOutputType | null
    _sum: DadosDiariosSumAggregateOutputType | null
    _min: DadosDiariosMinAggregateOutputType | null
    _max: DadosDiariosMaxAggregateOutputType | null
  }

  type GetDadosDiariosGroupByPayload<T extends DadosDiariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DadosDiariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DadosDiariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DadosDiariosGroupByOutputType[P]>
            : GetScalarType<T[P], DadosDiariosGroupByOutputType[P]>
        }
      >
    >


  export type DadosDiariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tempo?: boolean
    temperaturaInstantanea?: boolean
    precipitacao?: boolean
    previsibilidade?: boolean
    temperaturaMaxima?: boolean
    pressaoMediaNivelDoMar?: boolean
    velocidadeDoVentoMedia?: boolean
    horasDePrecipitacao?: boolean
    pressaoMinimaNivelDoMar?: boolean
    pictocode?: boolean
    fracaoDeNeve?: boolean
    horasComUmidadeMaior90?: boolean
    precipitacaoConvectiva?: boolean
    umidadeRelativaMaxima?: boolean
    temperaturaMinima?: boolean
    direcaoDoVento?: boolean
    temperaturaSensacaoMaxima?: boolean
    umidadeRelativaMinima?: boolean
    temperaturaSensacaoMedia?: boolean
    velocidadeDoVentoMinima?: boolean
    temperaturaSensacaoMinima?: boolean
    probabilidadeDePrecipitacao?: boolean
    indiceUv?: boolean
    manchasDeChuva?: boolean
    temperaturaMedia?: boolean
    pressaoMaximaNivelDoMar?: boolean
    umidadeRelativaMedia?: boolean
    classeDePrevisibilidade?: boolean
    velocidadeDoVentoMaxima?: boolean
  }, ExtArgs["result"]["dadosDiarios"]>

  export type DadosDiariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tempo?: boolean
    temperaturaInstantanea?: boolean
    precipitacao?: boolean
    previsibilidade?: boolean
    temperaturaMaxima?: boolean
    pressaoMediaNivelDoMar?: boolean
    velocidadeDoVentoMedia?: boolean
    horasDePrecipitacao?: boolean
    pressaoMinimaNivelDoMar?: boolean
    pictocode?: boolean
    fracaoDeNeve?: boolean
    horasComUmidadeMaior90?: boolean
    precipitacaoConvectiva?: boolean
    umidadeRelativaMaxima?: boolean
    temperaturaMinima?: boolean
    direcaoDoVento?: boolean
    temperaturaSensacaoMaxima?: boolean
    umidadeRelativaMinima?: boolean
    temperaturaSensacaoMedia?: boolean
    velocidadeDoVentoMinima?: boolean
    temperaturaSensacaoMinima?: boolean
    probabilidadeDePrecipitacao?: boolean
    indiceUv?: boolean
    manchasDeChuva?: boolean
    temperaturaMedia?: boolean
    pressaoMaximaNivelDoMar?: boolean
    umidadeRelativaMedia?: boolean
    classeDePrevisibilidade?: boolean
    velocidadeDoVentoMaxima?: boolean
  }, ExtArgs["result"]["dadosDiarios"]>

  export type DadosDiariosSelectScalar = {
    id?: boolean
    tempo?: boolean
    temperaturaInstantanea?: boolean
    precipitacao?: boolean
    previsibilidade?: boolean
    temperaturaMaxima?: boolean
    pressaoMediaNivelDoMar?: boolean
    velocidadeDoVentoMedia?: boolean
    horasDePrecipitacao?: boolean
    pressaoMinimaNivelDoMar?: boolean
    pictocode?: boolean
    fracaoDeNeve?: boolean
    horasComUmidadeMaior90?: boolean
    precipitacaoConvectiva?: boolean
    umidadeRelativaMaxima?: boolean
    temperaturaMinima?: boolean
    direcaoDoVento?: boolean
    temperaturaSensacaoMaxima?: boolean
    umidadeRelativaMinima?: boolean
    temperaturaSensacaoMedia?: boolean
    velocidadeDoVentoMinima?: boolean
    temperaturaSensacaoMinima?: boolean
    probabilidadeDePrecipitacao?: boolean
    indiceUv?: boolean
    manchasDeChuva?: boolean
    temperaturaMedia?: boolean
    pressaoMaximaNivelDoMar?: boolean
    umidadeRelativaMedia?: boolean
    classeDePrevisibilidade?: boolean
    velocidadeDoVentoMaxima?: boolean
  }


  export type $DadosDiariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DadosDiarios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tempo: Date
      temperaturaInstantanea: number | null
      precipitacao: number | null
      previsibilidade: number | null
      temperaturaMaxima: number | null
      pressaoMediaNivelDoMar: number | null
      velocidadeDoVentoMedia: number | null
      horasDePrecipitacao: number | null
      pressaoMinimaNivelDoMar: number | null
      pictocode: number | null
      fracaoDeNeve: number | null
      horasComUmidadeMaior90: number | null
      precipitacaoConvectiva: number | null
      umidadeRelativaMaxima: number | null
      temperaturaMinima: number | null
      direcaoDoVento: number | null
      temperaturaSensacaoMaxima: number | null
      umidadeRelativaMinima: number | null
      temperaturaSensacaoMedia: number | null
      velocidadeDoVentoMinima: number | null
      temperaturaSensacaoMinima: number | null
      probabilidadeDePrecipitacao: number | null
      indiceUv: number | null
      manchasDeChuva: string | null
      temperaturaMedia: number | null
      pressaoMaximaNivelDoMar: number | null
      umidadeRelativaMedia: number | null
      classeDePrevisibilidade: number | null
      velocidadeDoVentoMaxima: number | null
    }, ExtArgs["result"]["dadosDiarios"]>
    composites: {}
  }

  type DadosDiariosGetPayload<S extends boolean | null | undefined | DadosDiariosDefaultArgs> = $Result.GetResult<Prisma.$DadosDiariosPayload, S>

  type DadosDiariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DadosDiariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DadosDiariosCountAggregateInputType | true
    }

  export interface DadosDiariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DadosDiarios'], meta: { name: 'DadosDiarios' } }
    /**
     * Find zero or one DadosDiarios that matches the filter.
     * @param {DadosDiariosFindUniqueArgs} args - Arguments to find a DadosDiarios
     * @example
     * // Get one DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DadosDiariosFindUniqueArgs>(args: SelectSubset<T, DadosDiariosFindUniqueArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DadosDiarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DadosDiariosFindUniqueOrThrowArgs} args - Arguments to find a DadosDiarios
     * @example
     * // Get one DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DadosDiariosFindUniqueOrThrowArgs>(args: SelectSubset<T, DadosDiariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DadosDiarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosFindFirstArgs} args - Arguments to find a DadosDiarios
     * @example
     * // Get one DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DadosDiariosFindFirstArgs>(args?: SelectSubset<T, DadosDiariosFindFirstArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DadosDiarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosFindFirstOrThrowArgs} args - Arguments to find a DadosDiarios
     * @example
     * // Get one DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DadosDiariosFindFirstOrThrowArgs>(args?: SelectSubset<T, DadosDiariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DadosDiarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.findMany()
     * 
     * // Get first 10 DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dadosDiariosWithIdOnly = await prisma.dadosDiarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DadosDiariosFindManyArgs>(args?: SelectSubset<T, DadosDiariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DadosDiarios.
     * @param {DadosDiariosCreateArgs} args - Arguments to create a DadosDiarios.
     * @example
     * // Create one DadosDiarios
     * const DadosDiarios = await prisma.dadosDiarios.create({
     *   data: {
     *     // ... data to create a DadosDiarios
     *   }
     * })
     * 
     */
    create<T extends DadosDiariosCreateArgs>(args: SelectSubset<T, DadosDiariosCreateArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DadosDiarios.
     * @param {DadosDiariosCreateManyArgs} args - Arguments to create many DadosDiarios.
     * @example
     * // Create many DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DadosDiariosCreateManyArgs>(args?: SelectSubset<T, DadosDiariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DadosDiarios and returns the data saved in the database.
     * @param {DadosDiariosCreateManyAndReturnArgs} args - Arguments to create many DadosDiarios.
     * @example
     * // Create many DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DadosDiarios and only return the `id`
     * const dadosDiariosWithIdOnly = await prisma.dadosDiarios.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DadosDiariosCreateManyAndReturnArgs>(args?: SelectSubset<T, DadosDiariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DadosDiarios.
     * @param {DadosDiariosDeleteArgs} args - Arguments to delete one DadosDiarios.
     * @example
     * // Delete one DadosDiarios
     * const DadosDiarios = await prisma.dadosDiarios.delete({
     *   where: {
     *     // ... filter to delete one DadosDiarios
     *   }
     * })
     * 
     */
    delete<T extends DadosDiariosDeleteArgs>(args: SelectSubset<T, DadosDiariosDeleteArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DadosDiarios.
     * @param {DadosDiariosUpdateArgs} args - Arguments to update one DadosDiarios.
     * @example
     * // Update one DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DadosDiariosUpdateArgs>(args: SelectSubset<T, DadosDiariosUpdateArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DadosDiarios.
     * @param {DadosDiariosDeleteManyArgs} args - Arguments to filter DadosDiarios to delete.
     * @example
     * // Delete a few DadosDiarios
     * const { count } = await prisma.dadosDiarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DadosDiariosDeleteManyArgs>(args?: SelectSubset<T, DadosDiariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DadosDiarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DadosDiariosUpdateManyArgs>(args: SelectSubset<T, DadosDiariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DadosDiarios.
     * @param {DadosDiariosUpsertArgs} args - Arguments to update or create a DadosDiarios.
     * @example
     * // Update or create a DadosDiarios
     * const dadosDiarios = await prisma.dadosDiarios.upsert({
     *   create: {
     *     // ... data to create a DadosDiarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DadosDiarios we want to update
     *   }
     * })
     */
    upsert<T extends DadosDiariosUpsertArgs>(args: SelectSubset<T, DadosDiariosUpsertArgs<ExtArgs>>): Prisma__DadosDiariosClient<$Result.GetResult<Prisma.$DadosDiariosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DadosDiarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosCountArgs} args - Arguments to filter DadosDiarios to count.
     * @example
     * // Count the number of DadosDiarios
     * const count = await prisma.dadosDiarios.count({
     *   where: {
     *     // ... the filter for the DadosDiarios we want to count
     *   }
     * })
    **/
    count<T extends DadosDiariosCountArgs>(
      args?: Subset<T, DadosDiariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DadosDiariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DadosDiarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DadosDiariosAggregateArgs>(args: Subset<T, DadosDiariosAggregateArgs>): Prisma.PrismaPromise<GetDadosDiariosAggregateType<T>>

    /**
     * Group by DadosDiarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosDiariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DadosDiariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DadosDiariosGroupByArgs['orderBy'] }
        : { orderBy?: DadosDiariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DadosDiariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDadosDiariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DadosDiarios model
   */
  readonly fields: DadosDiariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DadosDiarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DadosDiariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DadosDiarios model
   */ 
  interface DadosDiariosFieldRefs {
    readonly id: FieldRef<"DadosDiarios", 'Int'>
    readonly tempo: FieldRef<"DadosDiarios", 'DateTime'>
    readonly temperaturaInstantanea: FieldRef<"DadosDiarios", 'Float'>
    readonly precipitacao: FieldRef<"DadosDiarios", 'Float'>
    readonly previsibilidade: FieldRef<"DadosDiarios", 'Int'>
    readonly temperaturaMaxima: FieldRef<"DadosDiarios", 'Float'>
    readonly pressaoMediaNivelDoMar: FieldRef<"DadosDiarios", 'Float'>
    readonly velocidadeDoVentoMedia: FieldRef<"DadosDiarios", 'Float'>
    readonly horasDePrecipitacao: FieldRef<"DadosDiarios", 'Float'>
    readonly pressaoMinimaNivelDoMar: FieldRef<"DadosDiarios", 'Float'>
    readonly pictocode: FieldRef<"DadosDiarios", 'Int'>
    readonly fracaoDeNeve: FieldRef<"DadosDiarios", 'Float'>
    readonly horasComUmidadeMaior90: FieldRef<"DadosDiarios", 'Float'>
    readonly precipitacaoConvectiva: FieldRef<"DadosDiarios", 'Float'>
    readonly umidadeRelativaMaxima: FieldRef<"DadosDiarios", 'Int'>
    readonly temperaturaMinima: FieldRef<"DadosDiarios", 'Float'>
    readonly direcaoDoVento: FieldRef<"DadosDiarios", 'Int'>
    readonly temperaturaSensacaoMaxima: FieldRef<"DadosDiarios", 'Float'>
    readonly umidadeRelativaMinima: FieldRef<"DadosDiarios", 'Int'>
    readonly temperaturaSensacaoMedia: FieldRef<"DadosDiarios", 'Float'>
    readonly velocidadeDoVentoMinima: FieldRef<"DadosDiarios", 'Float'>
    readonly temperaturaSensacaoMinima: FieldRef<"DadosDiarios", 'Float'>
    readonly probabilidadeDePrecipitacao: FieldRef<"DadosDiarios", 'Float'>
    readonly indiceUv: FieldRef<"DadosDiarios", 'Int'>
    readonly manchasDeChuva: FieldRef<"DadosDiarios", 'String'>
    readonly temperaturaMedia: FieldRef<"DadosDiarios", 'Float'>
    readonly pressaoMaximaNivelDoMar: FieldRef<"DadosDiarios", 'Float'>
    readonly umidadeRelativaMedia: FieldRef<"DadosDiarios", 'Int'>
    readonly classeDePrevisibilidade: FieldRef<"DadosDiarios", 'Float'>
    readonly velocidadeDoVentoMaxima: FieldRef<"DadosDiarios", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * DadosDiarios findUnique
   */
  export type DadosDiariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * Filter, which DadosDiarios to fetch.
     */
    where: DadosDiariosWhereUniqueInput
  }

  /**
   * DadosDiarios findUniqueOrThrow
   */
  export type DadosDiariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * Filter, which DadosDiarios to fetch.
     */
    where: DadosDiariosWhereUniqueInput
  }

  /**
   * DadosDiarios findFirst
   */
  export type DadosDiariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * Filter, which DadosDiarios to fetch.
     */
    where?: DadosDiariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosDiarios to fetch.
     */
    orderBy?: DadosDiariosOrderByWithRelationInput | DadosDiariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DadosDiarios.
     */
    cursor?: DadosDiariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosDiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosDiarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DadosDiarios.
     */
    distinct?: DadosDiariosScalarFieldEnum | DadosDiariosScalarFieldEnum[]
  }

  /**
   * DadosDiarios findFirstOrThrow
   */
  export type DadosDiariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * Filter, which DadosDiarios to fetch.
     */
    where?: DadosDiariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosDiarios to fetch.
     */
    orderBy?: DadosDiariosOrderByWithRelationInput | DadosDiariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DadosDiarios.
     */
    cursor?: DadosDiariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosDiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosDiarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DadosDiarios.
     */
    distinct?: DadosDiariosScalarFieldEnum | DadosDiariosScalarFieldEnum[]
  }

  /**
   * DadosDiarios findMany
   */
  export type DadosDiariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * Filter, which DadosDiarios to fetch.
     */
    where?: DadosDiariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosDiarios to fetch.
     */
    orderBy?: DadosDiariosOrderByWithRelationInput | DadosDiariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DadosDiarios.
     */
    cursor?: DadosDiariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosDiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosDiarios.
     */
    skip?: number
    distinct?: DadosDiariosScalarFieldEnum | DadosDiariosScalarFieldEnum[]
  }

  /**
   * DadosDiarios create
   */
  export type DadosDiariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * The data needed to create a DadosDiarios.
     */
    data: XOR<DadosDiariosCreateInput, DadosDiariosUncheckedCreateInput>
  }

  /**
   * DadosDiarios createMany
   */
  export type DadosDiariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DadosDiarios.
     */
    data: DadosDiariosCreateManyInput | DadosDiariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DadosDiarios createManyAndReturn
   */
  export type DadosDiariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DadosDiarios.
     */
    data: DadosDiariosCreateManyInput | DadosDiariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DadosDiarios update
   */
  export type DadosDiariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * The data needed to update a DadosDiarios.
     */
    data: XOR<DadosDiariosUpdateInput, DadosDiariosUncheckedUpdateInput>
    /**
     * Choose, which DadosDiarios to update.
     */
    where: DadosDiariosWhereUniqueInput
  }

  /**
   * DadosDiarios updateMany
   */
  export type DadosDiariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DadosDiarios.
     */
    data: XOR<DadosDiariosUpdateManyMutationInput, DadosDiariosUncheckedUpdateManyInput>
    /**
     * Filter which DadosDiarios to update
     */
    where?: DadosDiariosWhereInput
  }

  /**
   * DadosDiarios upsert
   */
  export type DadosDiariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * The filter to search for the DadosDiarios to update in case it exists.
     */
    where: DadosDiariosWhereUniqueInput
    /**
     * In case the DadosDiarios found by the `where` argument doesn't exist, create a new DadosDiarios with this data.
     */
    create: XOR<DadosDiariosCreateInput, DadosDiariosUncheckedCreateInput>
    /**
     * In case the DadosDiarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DadosDiariosUpdateInput, DadosDiariosUncheckedUpdateInput>
  }

  /**
   * DadosDiarios delete
   */
  export type DadosDiariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
    /**
     * Filter which DadosDiarios to delete.
     */
    where: DadosDiariosWhereUniqueInput
  }

  /**
   * DadosDiarios deleteMany
   */
  export type DadosDiariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DadosDiarios to delete
     */
    where?: DadosDiariosWhereInput
  }

  /**
   * DadosDiarios without action
   */
  export type DadosDiariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosDiarios
     */
    select?: DadosDiariosSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MetadadosScalarFieldEnum: {
    id: 'id',
    modelrunUpdatetimeUtc: 'modelrunUpdatetimeUtc',
    nome: 'nome',
    altura: 'altura',
    abreviacaoFusoHorario: 'abreviacaoFusoHorario',
    latitude: 'latitude',
    modelrunUtc: 'modelrunUtc',
    longitude: 'longitude',
    offsetHorarioUtc: 'offsetHorarioUtc',
    tempoGeracaoMs: 'tempoGeracaoMs'
  };

  export type MetadadosScalarFieldEnum = (typeof MetadadosScalarFieldEnum)[keyof typeof MetadadosScalarFieldEnum]


  export const UnidadesScalarFieldEnum: {
    id: 'id',
    previsibilidade: 'previsibilidade',
    precipitacao: 'precipitacao',
    velocidadeDoVento: 'velocidadeDoVento',
    probabilidadeDePrecipitacao: 'probabilidadeDePrecipitacao',
    umidadeRelativa: 'umidadeRelativa',
    tempo: 'tempo',
    temperatura: 'temperatura',
    pressao: 'pressao',
    direcaoDoVento: 'direcaoDoVento'
  };

  export type UnidadesScalarFieldEnum = (typeof UnidadesScalarFieldEnum)[keyof typeof UnidadesScalarFieldEnum]


  export const DadosAtuaisScalarFieldEnum: {
    id: 'id',
    tempo: 'tempo',
    dadosObservados: 'dadosObservados',
    metarid: 'metarid',
    ehDia: 'ehDia',
    velocidadeDoVento: 'velocidadeDoVento',
    anguloDeZenite: 'anguloDeZenite',
    pictocodeDetalhado: 'pictocodeDetalhado',
    pictocode: 'pictocode',
    temperatura: 'temperatura'
  };

  export type DadosAtuaisScalarFieldEnum = (typeof DadosAtuaisScalarFieldEnum)[keyof typeof DadosAtuaisScalarFieldEnum]


  export const DadosDiariosScalarFieldEnum: {
    id: 'id',
    tempo: 'tempo',
    temperaturaInstantanea: 'temperaturaInstantanea',
    precipitacao: 'precipitacao',
    previsibilidade: 'previsibilidade',
    temperaturaMaxima: 'temperaturaMaxima',
    pressaoMediaNivelDoMar: 'pressaoMediaNivelDoMar',
    velocidadeDoVentoMedia: 'velocidadeDoVentoMedia',
    horasDePrecipitacao: 'horasDePrecipitacao',
    pressaoMinimaNivelDoMar: 'pressaoMinimaNivelDoMar',
    pictocode: 'pictocode',
    fracaoDeNeve: 'fracaoDeNeve',
    horasComUmidadeMaior90: 'horasComUmidadeMaior90',
    precipitacaoConvectiva: 'precipitacaoConvectiva',
    umidadeRelativaMaxima: 'umidadeRelativaMaxima',
    temperaturaMinima: 'temperaturaMinima',
    direcaoDoVento: 'direcaoDoVento',
    temperaturaSensacaoMaxima: 'temperaturaSensacaoMaxima',
    umidadeRelativaMinima: 'umidadeRelativaMinima',
    temperaturaSensacaoMedia: 'temperaturaSensacaoMedia',
    velocidadeDoVentoMinima: 'velocidadeDoVentoMinima',
    temperaturaSensacaoMinima: 'temperaturaSensacaoMinima',
    probabilidadeDePrecipitacao: 'probabilidadeDePrecipitacao',
    indiceUv: 'indiceUv',
    manchasDeChuva: 'manchasDeChuva',
    temperaturaMedia: 'temperaturaMedia',
    pressaoMaximaNivelDoMar: 'pressaoMaximaNivelDoMar',
    umidadeRelativaMedia: 'umidadeRelativaMedia',
    classeDePrevisibilidade: 'classeDePrevisibilidade',
    velocidadeDoVentoMaxima: 'velocidadeDoVentoMaxima'
  };

  export type DadosDiariosScalarFieldEnum = (typeof DadosDiariosScalarFieldEnum)[keyof typeof DadosDiariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type MetadadosWhereInput = {
    AND?: MetadadosWhereInput | MetadadosWhereInput[]
    OR?: MetadadosWhereInput[]
    NOT?: MetadadosWhereInput | MetadadosWhereInput[]
    id?: IntFilter<"Metadados"> | number
    modelrunUpdatetimeUtc?: DateTimeFilter<"Metadados"> | Date | string
    nome?: StringNullableFilter<"Metadados"> | string | null
    altura?: IntNullableFilter<"Metadados"> | number | null
    abreviacaoFusoHorario?: StringNullableFilter<"Metadados"> | string | null
    latitude?: FloatNullableFilter<"Metadados"> | number | null
    modelrunUtc?: DateTimeFilter<"Metadados"> | Date | string
    longitude?: FloatNullableFilter<"Metadados"> | number | null
    offsetHorarioUtc?: FloatNullableFilter<"Metadados"> | number | null
    tempoGeracaoMs?: FloatNullableFilter<"Metadados"> | number | null
  }

  export type MetadadosOrderByWithRelationInput = {
    id?: SortOrder
    modelrunUpdatetimeUtc?: SortOrder
    nome?: SortOrderInput | SortOrder
    altura?: SortOrderInput | SortOrder
    abreviacaoFusoHorario?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    modelrunUtc?: SortOrder
    longitude?: SortOrderInput | SortOrder
    offsetHorarioUtc?: SortOrderInput | SortOrder
    tempoGeracaoMs?: SortOrderInput | SortOrder
  }

  export type MetadadosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MetadadosWhereInput | MetadadosWhereInput[]
    OR?: MetadadosWhereInput[]
    NOT?: MetadadosWhereInput | MetadadosWhereInput[]
    modelrunUpdatetimeUtc?: DateTimeFilter<"Metadados"> | Date | string
    nome?: StringNullableFilter<"Metadados"> | string | null
    altura?: IntNullableFilter<"Metadados"> | number | null
    abreviacaoFusoHorario?: StringNullableFilter<"Metadados"> | string | null
    latitude?: FloatNullableFilter<"Metadados"> | number | null
    modelrunUtc?: DateTimeFilter<"Metadados"> | Date | string
    longitude?: FloatNullableFilter<"Metadados"> | number | null
    offsetHorarioUtc?: FloatNullableFilter<"Metadados"> | number | null
    tempoGeracaoMs?: FloatNullableFilter<"Metadados"> | number | null
  }, "id">

  export type MetadadosOrderByWithAggregationInput = {
    id?: SortOrder
    modelrunUpdatetimeUtc?: SortOrder
    nome?: SortOrderInput | SortOrder
    altura?: SortOrderInput | SortOrder
    abreviacaoFusoHorario?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    modelrunUtc?: SortOrder
    longitude?: SortOrderInput | SortOrder
    offsetHorarioUtc?: SortOrderInput | SortOrder
    tempoGeracaoMs?: SortOrderInput | SortOrder
    _count?: MetadadosCountOrderByAggregateInput
    _avg?: MetadadosAvgOrderByAggregateInput
    _max?: MetadadosMaxOrderByAggregateInput
    _min?: MetadadosMinOrderByAggregateInput
    _sum?: MetadadosSumOrderByAggregateInput
  }

  export type MetadadosScalarWhereWithAggregatesInput = {
    AND?: MetadadosScalarWhereWithAggregatesInput | MetadadosScalarWhereWithAggregatesInput[]
    OR?: MetadadosScalarWhereWithAggregatesInput[]
    NOT?: MetadadosScalarWhereWithAggregatesInput | MetadadosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Metadados"> | number
    modelrunUpdatetimeUtc?: DateTimeWithAggregatesFilter<"Metadados"> | Date | string
    nome?: StringNullableWithAggregatesFilter<"Metadados"> | string | null
    altura?: IntNullableWithAggregatesFilter<"Metadados"> | number | null
    abreviacaoFusoHorario?: StringNullableWithAggregatesFilter<"Metadados"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"Metadados"> | number | null
    modelrunUtc?: DateTimeWithAggregatesFilter<"Metadados"> | Date | string
    longitude?: FloatNullableWithAggregatesFilter<"Metadados"> | number | null
    offsetHorarioUtc?: FloatNullableWithAggregatesFilter<"Metadados"> | number | null
    tempoGeracaoMs?: FloatNullableWithAggregatesFilter<"Metadados"> | number | null
  }

  export type UnidadesWhereInput = {
    AND?: UnidadesWhereInput | UnidadesWhereInput[]
    OR?: UnidadesWhereInput[]
    NOT?: UnidadesWhereInput | UnidadesWhereInput[]
    id?: IntFilter<"Unidades"> | number
    previsibilidade?: StringNullableFilter<"Unidades"> | string | null
    precipitacao?: StringNullableFilter<"Unidades"> | string | null
    velocidadeDoVento?: StringNullableFilter<"Unidades"> | string | null
    probabilidadeDePrecipitacao?: StringNullableFilter<"Unidades"> | string | null
    umidadeRelativa?: StringNullableFilter<"Unidades"> | string | null
    tempo?: StringNullableFilter<"Unidades"> | string | null
    temperatura?: StringNullableFilter<"Unidades"> | string | null
    pressao?: StringNullableFilter<"Unidades"> | string | null
    direcaoDoVento?: StringNullableFilter<"Unidades"> | string | null
  }

  export type UnidadesOrderByWithRelationInput = {
    id?: SortOrder
    previsibilidade?: SortOrderInput | SortOrder
    precipitacao?: SortOrderInput | SortOrder
    velocidadeDoVento?: SortOrderInput | SortOrder
    probabilidadeDePrecipitacao?: SortOrderInput | SortOrder
    umidadeRelativa?: SortOrderInput | SortOrder
    tempo?: SortOrderInput | SortOrder
    temperatura?: SortOrderInput | SortOrder
    pressao?: SortOrderInput | SortOrder
    direcaoDoVento?: SortOrderInput | SortOrder
  }

  export type UnidadesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UnidadesWhereInput | UnidadesWhereInput[]
    OR?: UnidadesWhereInput[]
    NOT?: UnidadesWhereInput | UnidadesWhereInput[]
    previsibilidade?: StringNullableFilter<"Unidades"> | string | null
    precipitacao?: StringNullableFilter<"Unidades"> | string | null
    velocidadeDoVento?: StringNullableFilter<"Unidades"> | string | null
    probabilidadeDePrecipitacao?: StringNullableFilter<"Unidades"> | string | null
    umidadeRelativa?: StringNullableFilter<"Unidades"> | string | null
    tempo?: StringNullableFilter<"Unidades"> | string | null
    temperatura?: StringNullableFilter<"Unidades"> | string | null
    pressao?: StringNullableFilter<"Unidades"> | string | null
    direcaoDoVento?: StringNullableFilter<"Unidades"> | string | null
  }, "id">

  export type UnidadesOrderByWithAggregationInput = {
    id?: SortOrder
    previsibilidade?: SortOrderInput | SortOrder
    precipitacao?: SortOrderInput | SortOrder
    velocidadeDoVento?: SortOrderInput | SortOrder
    probabilidadeDePrecipitacao?: SortOrderInput | SortOrder
    umidadeRelativa?: SortOrderInput | SortOrder
    tempo?: SortOrderInput | SortOrder
    temperatura?: SortOrderInput | SortOrder
    pressao?: SortOrderInput | SortOrder
    direcaoDoVento?: SortOrderInput | SortOrder
    _count?: UnidadesCountOrderByAggregateInput
    _avg?: UnidadesAvgOrderByAggregateInput
    _max?: UnidadesMaxOrderByAggregateInput
    _min?: UnidadesMinOrderByAggregateInput
    _sum?: UnidadesSumOrderByAggregateInput
  }

  export type UnidadesScalarWhereWithAggregatesInput = {
    AND?: UnidadesScalarWhereWithAggregatesInput | UnidadesScalarWhereWithAggregatesInput[]
    OR?: UnidadesScalarWhereWithAggregatesInput[]
    NOT?: UnidadesScalarWhereWithAggregatesInput | UnidadesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Unidades"> | number
    previsibilidade?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    precipitacao?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    velocidadeDoVento?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    probabilidadeDePrecipitacao?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    umidadeRelativa?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    tempo?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    temperatura?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    pressao?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
    direcaoDoVento?: StringNullableWithAggregatesFilter<"Unidades"> | string | null
  }

  export type DadosAtuaisWhereInput = {
    AND?: DadosAtuaisWhereInput | DadosAtuaisWhereInput[]
    OR?: DadosAtuaisWhereInput[]
    NOT?: DadosAtuaisWhereInput | DadosAtuaisWhereInput[]
    id?: IntFilter<"DadosAtuais"> | number
    tempo?: DateTimeFilter<"DadosAtuais"> | Date | string
    dadosObservados?: BoolNullableFilter<"DadosAtuais"> | boolean | null
    metarid?: StringNullableFilter<"DadosAtuais"> | string | null
    ehDia?: BoolNullableFilter<"DadosAtuais"> | boolean | null
    velocidadeDoVento?: FloatNullableFilter<"DadosAtuais"> | number | null
    anguloDeZenite?: FloatNullableFilter<"DadosAtuais"> | number | null
    pictocodeDetalhado?: IntNullableFilter<"DadosAtuais"> | number | null
    pictocode?: IntNullableFilter<"DadosAtuais"> | number | null
    temperatura?: FloatNullableFilter<"DadosAtuais"> | number | null
  }

  export type DadosAtuaisOrderByWithRelationInput = {
    id?: SortOrder
    tempo?: SortOrder
    dadosObservados?: SortOrderInput | SortOrder
    metarid?: SortOrderInput | SortOrder
    ehDia?: SortOrderInput | SortOrder
    velocidadeDoVento?: SortOrderInput | SortOrder
    anguloDeZenite?: SortOrderInput | SortOrder
    pictocodeDetalhado?: SortOrderInput | SortOrder
    pictocode?: SortOrderInput | SortOrder
    temperatura?: SortOrderInput | SortOrder
  }

  export type DadosAtuaisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DadosAtuaisWhereInput | DadosAtuaisWhereInput[]
    OR?: DadosAtuaisWhereInput[]
    NOT?: DadosAtuaisWhereInput | DadosAtuaisWhereInput[]
    tempo?: DateTimeFilter<"DadosAtuais"> | Date | string
    dadosObservados?: BoolNullableFilter<"DadosAtuais"> | boolean | null
    metarid?: StringNullableFilter<"DadosAtuais"> | string | null
    ehDia?: BoolNullableFilter<"DadosAtuais"> | boolean | null
    velocidadeDoVento?: FloatNullableFilter<"DadosAtuais"> | number | null
    anguloDeZenite?: FloatNullableFilter<"DadosAtuais"> | number | null
    pictocodeDetalhado?: IntNullableFilter<"DadosAtuais"> | number | null
    pictocode?: IntNullableFilter<"DadosAtuais"> | number | null
    temperatura?: FloatNullableFilter<"DadosAtuais"> | number | null
  }, "id">

  export type DadosAtuaisOrderByWithAggregationInput = {
    id?: SortOrder
    tempo?: SortOrder
    dadosObservados?: SortOrderInput | SortOrder
    metarid?: SortOrderInput | SortOrder
    ehDia?: SortOrderInput | SortOrder
    velocidadeDoVento?: SortOrderInput | SortOrder
    anguloDeZenite?: SortOrderInput | SortOrder
    pictocodeDetalhado?: SortOrderInput | SortOrder
    pictocode?: SortOrderInput | SortOrder
    temperatura?: SortOrderInput | SortOrder
    _count?: DadosAtuaisCountOrderByAggregateInput
    _avg?: DadosAtuaisAvgOrderByAggregateInput
    _max?: DadosAtuaisMaxOrderByAggregateInput
    _min?: DadosAtuaisMinOrderByAggregateInput
    _sum?: DadosAtuaisSumOrderByAggregateInput
  }

  export type DadosAtuaisScalarWhereWithAggregatesInput = {
    AND?: DadosAtuaisScalarWhereWithAggregatesInput | DadosAtuaisScalarWhereWithAggregatesInput[]
    OR?: DadosAtuaisScalarWhereWithAggregatesInput[]
    NOT?: DadosAtuaisScalarWhereWithAggregatesInput | DadosAtuaisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DadosAtuais"> | number
    tempo?: DateTimeWithAggregatesFilter<"DadosAtuais"> | Date | string
    dadosObservados?: BoolNullableWithAggregatesFilter<"DadosAtuais"> | boolean | null
    metarid?: StringNullableWithAggregatesFilter<"DadosAtuais"> | string | null
    ehDia?: BoolNullableWithAggregatesFilter<"DadosAtuais"> | boolean | null
    velocidadeDoVento?: FloatNullableWithAggregatesFilter<"DadosAtuais"> | number | null
    anguloDeZenite?: FloatNullableWithAggregatesFilter<"DadosAtuais"> | number | null
    pictocodeDetalhado?: IntNullableWithAggregatesFilter<"DadosAtuais"> | number | null
    pictocode?: IntNullableWithAggregatesFilter<"DadosAtuais"> | number | null
    temperatura?: FloatNullableWithAggregatesFilter<"DadosAtuais"> | number | null
  }

  export type DadosDiariosWhereInput = {
    AND?: DadosDiariosWhereInput | DadosDiariosWhereInput[]
    OR?: DadosDiariosWhereInput[]
    NOT?: DadosDiariosWhereInput | DadosDiariosWhereInput[]
    id?: IntFilter<"DadosDiarios"> | number
    tempo?: DateTimeFilter<"DadosDiarios"> | Date | string
    temperaturaInstantanea?: FloatNullableFilter<"DadosDiarios"> | number | null
    precipitacao?: FloatNullableFilter<"DadosDiarios"> | number | null
    previsibilidade?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaMaxima?: FloatNullableFilter<"DadosDiarios"> | number | null
    pressaoMediaNivelDoMar?: FloatNullableFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMedia?: FloatNullableFilter<"DadosDiarios"> | number | null
    horasDePrecipitacao?: FloatNullableFilter<"DadosDiarios"> | number | null
    pressaoMinimaNivelDoMar?: FloatNullableFilter<"DadosDiarios"> | number | null
    pictocode?: IntNullableFilter<"DadosDiarios"> | number | null
    fracaoDeNeve?: FloatNullableFilter<"DadosDiarios"> | number | null
    horasComUmidadeMaior90?: FloatNullableFilter<"DadosDiarios"> | number | null
    precipitacaoConvectiva?: FloatNullableFilter<"DadosDiarios"> | number | null
    umidadeRelativaMaxima?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaMinima?: FloatNullableFilter<"DadosDiarios"> | number | null
    direcaoDoVento?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMaxima?: FloatNullableFilter<"DadosDiarios"> | number | null
    umidadeRelativaMinima?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMedia?: FloatNullableFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMinima?: FloatNullableFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMinima?: FloatNullableFilter<"DadosDiarios"> | number | null
    probabilidadeDePrecipitacao?: FloatNullableFilter<"DadosDiarios"> | number | null
    indiceUv?: IntNullableFilter<"DadosDiarios"> | number | null
    manchasDeChuva?: StringNullableFilter<"DadosDiarios"> | string | null
    temperaturaMedia?: FloatNullableFilter<"DadosDiarios"> | number | null
    pressaoMaximaNivelDoMar?: FloatNullableFilter<"DadosDiarios"> | number | null
    umidadeRelativaMedia?: IntNullableFilter<"DadosDiarios"> | number | null
    classeDePrevisibilidade?: FloatNullableFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMaxima?: FloatNullableFilter<"DadosDiarios"> | number | null
  }

  export type DadosDiariosOrderByWithRelationInput = {
    id?: SortOrder
    tempo?: SortOrder
    temperaturaInstantanea?: SortOrderInput | SortOrder
    precipitacao?: SortOrderInput | SortOrder
    previsibilidade?: SortOrderInput | SortOrder
    temperaturaMaxima?: SortOrderInput | SortOrder
    pressaoMediaNivelDoMar?: SortOrderInput | SortOrder
    velocidadeDoVentoMedia?: SortOrderInput | SortOrder
    horasDePrecipitacao?: SortOrderInput | SortOrder
    pressaoMinimaNivelDoMar?: SortOrderInput | SortOrder
    pictocode?: SortOrderInput | SortOrder
    fracaoDeNeve?: SortOrderInput | SortOrder
    horasComUmidadeMaior90?: SortOrderInput | SortOrder
    precipitacaoConvectiva?: SortOrderInput | SortOrder
    umidadeRelativaMaxima?: SortOrderInput | SortOrder
    temperaturaMinima?: SortOrderInput | SortOrder
    direcaoDoVento?: SortOrderInput | SortOrder
    temperaturaSensacaoMaxima?: SortOrderInput | SortOrder
    umidadeRelativaMinima?: SortOrderInput | SortOrder
    temperaturaSensacaoMedia?: SortOrderInput | SortOrder
    velocidadeDoVentoMinima?: SortOrderInput | SortOrder
    temperaturaSensacaoMinima?: SortOrderInput | SortOrder
    probabilidadeDePrecipitacao?: SortOrderInput | SortOrder
    indiceUv?: SortOrderInput | SortOrder
    manchasDeChuva?: SortOrderInput | SortOrder
    temperaturaMedia?: SortOrderInput | SortOrder
    pressaoMaximaNivelDoMar?: SortOrderInput | SortOrder
    umidadeRelativaMedia?: SortOrderInput | SortOrder
    classeDePrevisibilidade?: SortOrderInput | SortOrder
    velocidadeDoVentoMaxima?: SortOrderInput | SortOrder
  }

  export type DadosDiariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DadosDiariosWhereInput | DadosDiariosWhereInput[]
    OR?: DadosDiariosWhereInput[]
    NOT?: DadosDiariosWhereInput | DadosDiariosWhereInput[]
    tempo?: DateTimeFilter<"DadosDiarios"> | Date | string
    temperaturaInstantanea?: FloatNullableFilter<"DadosDiarios"> | number | null
    precipitacao?: FloatNullableFilter<"DadosDiarios"> | number | null
    previsibilidade?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaMaxima?: FloatNullableFilter<"DadosDiarios"> | number | null
    pressaoMediaNivelDoMar?: FloatNullableFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMedia?: FloatNullableFilter<"DadosDiarios"> | number | null
    horasDePrecipitacao?: FloatNullableFilter<"DadosDiarios"> | number | null
    pressaoMinimaNivelDoMar?: FloatNullableFilter<"DadosDiarios"> | number | null
    pictocode?: IntNullableFilter<"DadosDiarios"> | number | null
    fracaoDeNeve?: FloatNullableFilter<"DadosDiarios"> | number | null
    horasComUmidadeMaior90?: FloatNullableFilter<"DadosDiarios"> | number | null
    precipitacaoConvectiva?: FloatNullableFilter<"DadosDiarios"> | number | null
    umidadeRelativaMaxima?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaMinima?: FloatNullableFilter<"DadosDiarios"> | number | null
    direcaoDoVento?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMaxima?: FloatNullableFilter<"DadosDiarios"> | number | null
    umidadeRelativaMinima?: IntNullableFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMedia?: FloatNullableFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMinima?: FloatNullableFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMinima?: FloatNullableFilter<"DadosDiarios"> | number | null
    probabilidadeDePrecipitacao?: FloatNullableFilter<"DadosDiarios"> | number | null
    indiceUv?: IntNullableFilter<"DadosDiarios"> | number | null
    manchasDeChuva?: StringNullableFilter<"DadosDiarios"> | string | null
    temperaturaMedia?: FloatNullableFilter<"DadosDiarios"> | number | null
    pressaoMaximaNivelDoMar?: FloatNullableFilter<"DadosDiarios"> | number | null
    umidadeRelativaMedia?: IntNullableFilter<"DadosDiarios"> | number | null
    classeDePrevisibilidade?: FloatNullableFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMaxima?: FloatNullableFilter<"DadosDiarios"> | number | null
  }, "id">

  export type DadosDiariosOrderByWithAggregationInput = {
    id?: SortOrder
    tempo?: SortOrder
    temperaturaInstantanea?: SortOrderInput | SortOrder
    precipitacao?: SortOrderInput | SortOrder
    previsibilidade?: SortOrderInput | SortOrder
    temperaturaMaxima?: SortOrderInput | SortOrder
    pressaoMediaNivelDoMar?: SortOrderInput | SortOrder
    velocidadeDoVentoMedia?: SortOrderInput | SortOrder
    horasDePrecipitacao?: SortOrderInput | SortOrder
    pressaoMinimaNivelDoMar?: SortOrderInput | SortOrder
    pictocode?: SortOrderInput | SortOrder
    fracaoDeNeve?: SortOrderInput | SortOrder
    horasComUmidadeMaior90?: SortOrderInput | SortOrder
    precipitacaoConvectiva?: SortOrderInput | SortOrder
    umidadeRelativaMaxima?: SortOrderInput | SortOrder
    temperaturaMinima?: SortOrderInput | SortOrder
    direcaoDoVento?: SortOrderInput | SortOrder
    temperaturaSensacaoMaxima?: SortOrderInput | SortOrder
    umidadeRelativaMinima?: SortOrderInput | SortOrder
    temperaturaSensacaoMedia?: SortOrderInput | SortOrder
    velocidadeDoVentoMinima?: SortOrderInput | SortOrder
    temperaturaSensacaoMinima?: SortOrderInput | SortOrder
    probabilidadeDePrecipitacao?: SortOrderInput | SortOrder
    indiceUv?: SortOrderInput | SortOrder
    manchasDeChuva?: SortOrderInput | SortOrder
    temperaturaMedia?: SortOrderInput | SortOrder
    pressaoMaximaNivelDoMar?: SortOrderInput | SortOrder
    umidadeRelativaMedia?: SortOrderInput | SortOrder
    classeDePrevisibilidade?: SortOrderInput | SortOrder
    velocidadeDoVentoMaxima?: SortOrderInput | SortOrder
    _count?: DadosDiariosCountOrderByAggregateInput
    _avg?: DadosDiariosAvgOrderByAggregateInput
    _max?: DadosDiariosMaxOrderByAggregateInput
    _min?: DadosDiariosMinOrderByAggregateInput
    _sum?: DadosDiariosSumOrderByAggregateInput
  }

  export type DadosDiariosScalarWhereWithAggregatesInput = {
    AND?: DadosDiariosScalarWhereWithAggregatesInput | DadosDiariosScalarWhereWithAggregatesInput[]
    OR?: DadosDiariosScalarWhereWithAggregatesInput[]
    NOT?: DadosDiariosScalarWhereWithAggregatesInput | DadosDiariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DadosDiarios"> | number
    tempo?: DateTimeWithAggregatesFilter<"DadosDiarios"> | Date | string
    temperaturaInstantanea?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    precipitacao?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    previsibilidade?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    temperaturaMaxima?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    pressaoMediaNivelDoMar?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMedia?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    horasDePrecipitacao?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    pressaoMinimaNivelDoMar?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    pictocode?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    fracaoDeNeve?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    horasComUmidadeMaior90?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    precipitacaoConvectiva?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    umidadeRelativaMaxima?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    temperaturaMinima?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    direcaoDoVento?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMaxima?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    umidadeRelativaMinima?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMedia?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMinima?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    temperaturaSensacaoMinima?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    probabilidadeDePrecipitacao?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    indiceUv?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    manchasDeChuva?: StringNullableWithAggregatesFilter<"DadosDiarios"> | string | null
    temperaturaMedia?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    pressaoMaximaNivelDoMar?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    umidadeRelativaMedia?: IntNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    classeDePrevisibilidade?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
    velocidadeDoVentoMaxima?: FloatNullableWithAggregatesFilter<"DadosDiarios"> | number | null
  }

  export type MetadadosCreateInput = {
    modelrunUpdatetimeUtc: Date | string
    nome?: string | null
    altura?: number | null
    abreviacaoFusoHorario?: string | null
    latitude?: number | null
    modelrunUtc: Date | string
    longitude?: number | null
    offsetHorarioUtc?: number | null
    tempoGeracaoMs?: number | null
  }

  export type MetadadosUncheckedCreateInput = {
    id?: number
    modelrunUpdatetimeUtc: Date | string
    nome?: string | null
    altura?: number | null
    abreviacaoFusoHorario?: string | null
    latitude?: number | null
    modelrunUtc: Date | string
    longitude?: number | null
    offsetHorarioUtc?: number | null
    tempoGeracaoMs?: number | null
  }

  export type MetadadosUpdateInput = {
    modelrunUpdatetimeUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    abreviacaoFusoHorario?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    modelrunUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    offsetHorarioUtc?: NullableFloatFieldUpdateOperationsInput | number | null
    tempoGeracaoMs?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetadadosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelrunUpdatetimeUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    abreviacaoFusoHorario?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    modelrunUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    offsetHorarioUtc?: NullableFloatFieldUpdateOperationsInput | number | null
    tempoGeracaoMs?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetadadosCreateManyInput = {
    id?: number
    modelrunUpdatetimeUtc: Date | string
    nome?: string | null
    altura?: number | null
    abreviacaoFusoHorario?: string | null
    latitude?: number | null
    modelrunUtc: Date | string
    longitude?: number | null
    offsetHorarioUtc?: number | null
    tempoGeracaoMs?: number | null
  }

  export type MetadadosUpdateManyMutationInput = {
    modelrunUpdatetimeUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    abreviacaoFusoHorario?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    modelrunUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    offsetHorarioUtc?: NullableFloatFieldUpdateOperationsInput | number | null
    tempoGeracaoMs?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetadadosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelrunUpdatetimeUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    abreviacaoFusoHorario?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    modelrunUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    offsetHorarioUtc?: NullableFloatFieldUpdateOperationsInput | number | null
    tempoGeracaoMs?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UnidadesCreateInput = {
    previsibilidade?: string | null
    precipitacao?: string | null
    velocidadeDoVento?: string | null
    probabilidadeDePrecipitacao?: string | null
    umidadeRelativa?: string | null
    tempo?: string | null
    temperatura?: string | null
    pressao?: string | null
    direcaoDoVento?: string | null
  }

  export type UnidadesUncheckedCreateInput = {
    id?: number
    previsibilidade?: string | null
    precipitacao?: string | null
    velocidadeDoVento?: string | null
    probabilidadeDePrecipitacao?: string | null
    umidadeRelativa?: string | null
    tempo?: string | null
    temperatura?: string | null
    pressao?: string | null
    direcaoDoVento?: string | null
  }

  export type UnidadesUpdateInput = {
    previsibilidade?: NullableStringFieldUpdateOperationsInput | string | null
    precipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    velocidadeDoVento?: NullableStringFieldUpdateOperationsInput | string | null
    probabilidadeDePrecipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    umidadeRelativa?: NullableStringFieldUpdateOperationsInput | string | null
    tempo?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableStringFieldUpdateOperationsInput | string | null
    pressao?: NullableStringFieldUpdateOperationsInput | string | null
    direcaoDoVento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UnidadesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    previsibilidade?: NullableStringFieldUpdateOperationsInput | string | null
    precipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    velocidadeDoVento?: NullableStringFieldUpdateOperationsInput | string | null
    probabilidadeDePrecipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    umidadeRelativa?: NullableStringFieldUpdateOperationsInput | string | null
    tempo?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableStringFieldUpdateOperationsInput | string | null
    pressao?: NullableStringFieldUpdateOperationsInput | string | null
    direcaoDoVento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UnidadesCreateManyInput = {
    id?: number
    previsibilidade?: string | null
    precipitacao?: string | null
    velocidadeDoVento?: string | null
    probabilidadeDePrecipitacao?: string | null
    umidadeRelativa?: string | null
    tempo?: string | null
    temperatura?: string | null
    pressao?: string | null
    direcaoDoVento?: string | null
  }

  export type UnidadesUpdateManyMutationInput = {
    previsibilidade?: NullableStringFieldUpdateOperationsInput | string | null
    precipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    velocidadeDoVento?: NullableStringFieldUpdateOperationsInput | string | null
    probabilidadeDePrecipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    umidadeRelativa?: NullableStringFieldUpdateOperationsInput | string | null
    tempo?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableStringFieldUpdateOperationsInput | string | null
    pressao?: NullableStringFieldUpdateOperationsInput | string | null
    direcaoDoVento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UnidadesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    previsibilidade?: NullableStringFieldUpdateOperationsInput | string | null
    precipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    velocidadeDoVento?: NullableStringFieldUpdateOperationsInput | string | null
    probabilidadeDePrecipitacao?: NullableStringFieldUpdateOperationsInput | string | null
    umidadeRelativa?: NullableStringFieldUpdateOperationsInput | string | null
    tempo?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableStringFieldUpdateOperationsInput | string | null
    pressao?: NullableStringFieldUpdateOperationsInput | string | null
    direcaoDoVento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DadosAtuaisCreateInput = {
    tempo: Date | string
    dadosObservados?: boolean | null
    metarid?: string | null
    ehDia?: boolean | null
    velocidadeDoVento?: number | null
    anguloDeZenite?: number | null
    pictocodeDetalhado?: number | null
    pictocode?: number | null
    temperatura?: number | null
  }

  export type DadosAtuaisUncheckedCreateInput = {
    id?: number
    tempo: Date | string
    dadosObservados?: boolean | null
    metarid?: string | null
    ehDia?: boolean | null
    velocidadeDoVento?: number | null
    anguloDeZenite?: number | null
    pictocodeDetalhado?: number | null
    pictocode?: number | null
    temperatura?: number | null
  }

  export type DadosAtuaisUpdateInput = {
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    dadosObservados?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metarid?: NullableStringFieldUpdateOperationsInput | string | null
    ehDia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    velocidadeDoVento?: NullableFloatFieldUpdateOperationsInput | number | null
    anguloDeZenite?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocodeDetalhado?: NullableIntFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    temperatura?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosAtuaisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    dadosObservados?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metarid?: NullableStringFieldUpdateOperationsInput | string | null
    ehDia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    velocidadeDoVento?: NullableFloatFieldUpdateOperationsInput | number | null
    anguloDeZenite?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocodeDetalhado?: NullableIntFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    temperatura?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosAtuaisCreateManyInput = {
    id?: number
    tempo: Date | string
    dadosObservados?: boolean | null
    metarid?: string | null
    ehDia?: boolean | null
    velocidadeDoVento?: number | null
    anguloDeZenite?: number | null
    pictocodeDetalhado?: number | null
    pictocode?: number | null
    temperatura?: number | null
  }

  export type DadosAtuaisUpdateManyMutationInput = {
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    dadosObservados?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metarid?: NullableStringFieldUpdateOperationsInput | string | null
    ehDia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    velocidadeDoVento?: NullableFloatFieldUpdateOperationsInput | number | null
    anguloDeZenite?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocodeDetalhado?: NullableIntFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    temperatura?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosAtuaisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    dadosObservados?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metarid?: NullableStringFieldUpdateOperationsInput | string | null
    ehDia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    velocidadeDoVento?: NullableFloatFieldUpdateOperationsInput | number | null
    anguloDeZenite?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocodeDetalhado?: NullableIntFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    temperatura?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosDiariosCreateInput = {
    tempo: Date | string
    temperaturaInstantanea?: number | null
    precipitacao?: number | null
    previsibilidade?: number | null
    temperaturaMaxima?: number | null
    pressaoMediaNivelDoMar?: number | null
    velocidadeDoVentoMedia?: number | null
    horasDePrecipitacao?: number | null
    pressaoMinimaNivelDoMar?: number | null
    pictocode?: number | null
    fracaoDeNeve?: number | null
    horasComUmidadeMaior90?: number | null
    precipitacaoConvectiva?: number | null
    umidadeRelativaMaxima?: number | null
    temperaturaMinima?: number | null
    direcaoDoVento?: number | null
    temperaturaSensacaoMaxima?: number | null
    umidadeRelativaMinima?: number | null
    temperaturaSensacaoMedia?: number | null
    velocidadeDoVentoMinima?: number | null
    temperaturaSensacaoMinima?: number | null
    probabilidadeDePrecipitacao?: number | null
    indiceUv?: number | null
    manchasDeChuva?: string | null
    temperaturaMedia?: number | null
    pressaoMaximaNivelDoMar?: number | null
    umidadeRelativaMedia?: number | null
    classeDePrevisibilidade?: number | null
    velocidadeDoVentoMaxima?: number | null
  }

  export type DadosDiariosUncheckedCreateInput = {
    id?: number
    tempo: Date | string
    temperaturaInstantanea?: number | null
    precipitacao?: number | null
    previsibilidade?: number | null
    temperaturaMaxima?: number | null
    pressaoMediaNivelDoMar?: number | null
    velocidadeDoVentoMedia?: number | null
    horasDePrecipitacao?: number | null
    pressaoMinimaNivelDoMar?: number | null
    pictocode?: number | null
    fracaoDeNeve?: number | null
    horasComUmidadeMaior90?: number | null
    precipitacaoConvectiva?: number | null
    umidadeRelativaMaxima?: number | null
    temperaturaMinima?: number | null
    direcaoDoVento?: number | null
    temperaturaSensacaoMaxima?: number | null
    umidadeRelativaMinima?: number | null
    temperaturaSensacaoMedia?: number | null
    velocidadeDoVentoMinima?: number | null
    temperaturaSensacaoMinima?: number | null
    probabilidadeDePrecipitacao?: number | null
    indiceUv?: number | null
    manchasDeChuva?: string | null
    temperaturaMedia?: number | null
    pressaoMaximaNivelDoMar?: number | null
    umidadeRelativaMedia?: number | null
    classeDePrevisibilidade?: number | null
    velocidadeDoVentoMaxima?: number | null
  }

  export type DadosDiariosUpdateInput = {
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    temperaturaInstantanea?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    previsibilidade?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMediaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    horasDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMinimaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    fracaoDeNeve?: NullableFloatFieldUpdateOperationsInput | number | null
    horasComUmidadeMaior90?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacaoConvectiva?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMaxima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    direcaoDoVento?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMinima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    probabilidadeDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    indiceUv?: NullableIntFieldUpdateOperationsInput | number | null
    manchasDeChuva?: NullableStringFieldUpdateOperationsInput | string | null
    temperaturaMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMaximaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMedia?: NullableIntFieldUpdateOperationsInput | number | null
    classeDePrevisibilidade?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosDiariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    temperaturaInstantanea?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    previsibilidade?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMediaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    horasDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMinimaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    fracaoDeNeve?: NullableFloatFieldUpdateOperationsInput | number | null
    horasComUmidadeMaior90?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacaoConvectiva?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMaxima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    direcaoDoVento?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMinima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    probabilidadeDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    indiceUv?: NullableIntFieldUpdateOperationsInput | number | null
    manchasDeChuva?: NullableStringFieldUpdateOperationsInput | string | null
    temperaturaMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMaximaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMedia?: NullableIntFieldUpdateOperationsInput | number | null
    classeDePrevisibilidade?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosDiariosCreateManyInput = {
    id?: number
    tempo: Date | string
    temperaturaInstantanea?: number | null
    precipitacao?: number | null
    previsibilidade?: number | null
    temperaturaMaxima?: number | null
    pressaoMediaNivelDoMar?: number | null
    velocidadeDoVentoMedia?: number | null
    horasDePrecipitacao?: number | null
    pressaoMinimaNivelDoMar?: number | null
    pictocode?: number | null
    fracaoDeNeve?: number | null
    horasComUmidadeMaior90?: number | null
    precipitacaoConvectiva?: number | null
    umidadeRelativaMaxima?: number | null
    temperaturaMinima?: number | null
    direcaoDoVento?: number | null
    temperaturaSensacaoMaxima?: number | null
    umidadeRelativaMinima?: number | null
    temperaturaSensacaoMedia?: number | null
    velocidadeDoVentoMinima?: number | null
    temperaturaSensacaoMinima?: number | null
    probabilidadeDePrecipitacao?: number | null
    indiceUv?: number | null
    manchasDeChuva?: string | null
    temperaturaMedia?: number | null
    pressaoMaximaNivelDoMar?: number | null
    umidadeRelativaMedia?: number | null
    classeDePrevisibilidade?: number | null
    velocidadeDoVentoMaxima?: number | null
  }

  export type DadosDiariosUpdateManyMutationInput = {
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    temperaturaInstantanea?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    previsibilidade?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMediaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    horasDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMinimaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    fracaoDeNeve?: NullableFloatFieldUpdateOperationsInput | number | null
    horasComUmidadeMaior90?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacaoConvectiva?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMaxima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    direcaoDoVento?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMinima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    probabilidadeDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    indiceUv?: NullableIntFieldUpdateOperationsInput | number | null
    manchasDeChuva?: NullableStringFieldUpdateOperationsInput | string | null
    temperaturaMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMaximaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMedia?: NullableIntFieldUpdateOperationsInput | number | null
    classeDePrevisibilidade?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DadosDiariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    temperaturaInstantanea?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    previsibilidade?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMediaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    horasDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMinimaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    pictocode?: NullableIntFieldUpdateOperationsInput | number | null
    fracaoDeNeve?: NullableFloatFieldUpdateOperationsInput | number | null
    horasComUmidadeMaior90?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitacaoConvectiva?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMaxima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    direcaoDoVento?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMinima?: NullableIntFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    temperaturaSensacaoMinima?: NullableFloatFieldUpdateOperationsInput | number | null
    probabilidadeDePrecipitacao?: NullableFloatFieldUpdateOperationsInput | number | null
    indiceUv?: NullableIntFieldUpdateOperationsInput | number | null
    manchasDeChuva?: NullableStringFieldUpdateOperationsInput | string | null
    temperaturaMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    pressaoMaximaNivelDoMar?: NullableFloatFieldUpdateOperationsInput | number | null
    umidadeRelativaMedia?: NullableIntFieldUpdateOperationsInput | number | null
    classeDePrevisibilidade?: NullableFloatFieldUpdateOperationsInput | number | null
    velocidadeDoVentoMaxima?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MetadadosCountOrderByAggregateInput = {
    id?: SortOrder
    modelrunUpdatetimeUtc?: SortOrder
    nome?: SortOrder
    altura?: SortOrder
    abreviacaoFusoHorario?: SortOrder
    latitude?: SortOrder
    modelrunUtc?: SortOrder
    longitude?: SortOrder
    offsetHorarioUtc?: SortOrder
    tempoGeracaoMs?: SortOrder
  }

  export type MetadadosAvgOrderByAggregateInput = {
    id?: SortOrder
    altura?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    offsetHorarioUtc?: SortOrder
    tempoGeracaoMs?: SortOrder
  }

  export type MetadadosMaxOrderByAggregateInput = {
    id?: SortOrder
    modelrunUpdatetimeUtc?: SortOrder
    nome?: SortOrder
    altura?: SortOrder
    abreviacaoFusoHorario?: SortOrder
    latitude?: SortOrder
    modelrunUtc?: SortOrder
    longitude?: SortOrder
    offsetHorarioUtc?: SortOrder
    tempoGeracaoMs?: SortOrder
  }

  export type MetadadosMinOrderByAggregateInput = {
    id?: SortOrder
    modelrunUpdatetimeUtc?: SortOrder
    nome?: SortOrder
    altura?: SortOrder
    abreviacaoFusoHorario?: SortOrder
    latitude?: SortOrder
    modelrunUtc?: SortOrder
    longitude?: SortOrder
    offsetHorarioUtc?: SortOrder
    tempoGeracaoMs?: SortOrder
  }

  export type MetadadosSumOrderByAggregateInput = {
    id?: SortOrder
    altura?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    offsetHorarioUtc?: SortOrder
    tempoGeracaoMs?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type UnidadesCountOrderByAggregateInput = {
    id?: SortOrder
    previsibilidade?: SortOrder
    precipitacao?: SortOrder
    velocidadeDoVento?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    umidadeRelativa?: SortOrder
    tempo?: SortOrder
    temperatura?: SortOrder
    pressao?: SortOrder
    direcaoDoVento?: SortOrder
  }

  export type UnidadesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UnidadesMaxOrderByAggregateInput = {
    id?: SortOrder
    previsibilidade?: SortOrder
    precipitacao?: SortOrder
    velocidadeDoVento?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    umidadeRelativa?: SortOrder
    tempo?: SortOrder
    temperatura?: SortOrder
    pressao?: SortOrder
    direcaoDoVento?: SortOrder
  }

  export type UnidadesMinOrderByAggregateInput = {
    id?: SortOrder
    previsibilidade?: SortOrder
    precipitacao?: SortOrder
    velocidadeDoVento?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    umidadeRelativa?: SortOrder
    tempo?: SortOrder
    temperatura?: SortOrder
    pressao?: SortOrder
    direcaoDoVento?: SortOrder
  }

  export type UnidadesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DadosAtuaisCountOrderByAggregateInput = {
    id?: SortOrder
    tempo?: SortOrder
    dadosObservados?: SortOrder
    metarid?: SortOrder
    ehDia?: SortOrder
    velocidadeDoVento?: SortOrder
    anguloDeZenite?: SortOrder
    pictocodeDetalhado?: SortOrder
    pictocode?: SortOrder
    temperatura?: SortOrder
  }

  export type DadosAtuaisAvgOrderByAggregateInput = {
    id?: SortOrder
    velocidadeDoVento?: SortOrder
    anguloDeZenite?: SortOrder
    pictocodeDetalhado?: SortOrder
    pictocode?: SortOrder
    temperatura?: SortOrder
  }

  export type DadosAtuaisMaxOrderByAggregateInput = {
    id?: SortOrder
    tempo?: SortOrder
    dadosObservados?: SortOrder
    metarid?: SortOrder
    ehDia?: SortOrder
    velocidadeDoVento?: SortOrder
    anguloDeZenite?: SortOrder
    pictocodeDetalhado?: SortOrder
    pictocode?: SortOrder
    temperatura?: SortOrder
  }

  export type DadosAtuaisMinOrderByAggregateInput = {
    id?: SortOrder
    tempo?: SortOrder
    dadosObservados?: SortOrder
    metarid?: SortOrder
    ehDia?: SortOrder
    velocidadeDoVento?: SortOrder
    anguloDeZenite?: SortOrder
    pictocodeDetalhado?: SortOrder
    pictocode?: SortOrder
    temperatura?: SortOrder
  }

  export type DadosAtuaisSumOrderByAggregateInput = {
    id?: SortOrder
    velocidadeDoVento?: SortOrder
    anguloDeZenite?: SortOrder
    pictocodeDetalhado?: SortOrder
    pictocode?: SortOrder
    temperatura?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DadosDiariosCountOrderByAggregateInput = {
    id?: SortOrder
    tempo?: SortOrder
    temperaturaInstantanea?: SortOrder
    precipitacao?: SortOrder
    previsibilidade?: SortOrder
    temperaturaMaxima?: SortOrder
    pressaoMediaNivelDoMar?: SortOrder
    velocidadeDoVentoMedia?: SortOrder
    horasDePrecipitacao?: SortOrder
    pressaoMinimaNivelDoMar?: SortOrder
    pictocode?: SortOrder
    fracaoDeNeve?: SortOrder
    horasComUmidadeMaior90?: SortOrder
    precipitacaoConvectiva?: SortOrder
    umidadeRelativaMaxima?: SortOrder
    temperaturaMinima?: SortOrder
    direcaoDoVento?: SortOrder
    temperaturaSensacaoMaxima?: SortOrder
    umidadeRelativaMinima?: SortOrder
    temperaturaSensacaoMedia?: SortOrder
    velocidadeDoVentoMinima?: SortOrder
    temperaturaSensacaoMinima?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    indiceUv?: SortOrder
    manchasDeChuva?: SortOrder
    temperaturaMedia?: SortOrder
    pressaoMaximaNivelDoMar?: SortOrder
    umidadeRelativaMedia?: SortOrder
    classeDePrevisibilidade?: SortOrder
    velocidadeDoVentoMaxima?: SortOrder
  }

  export type DadosDiariosAvgOrderByAggregateInput = {
    id?: SortOrder
    temperaturaInstantanea?: SortOrder
    precipitacao?: SortOrder
    previsibilidade?: SortOrder
    temperaturaMaxima?: SortOrder
    pressaoMediaNivelDoMar?: SortOrder
    velocidadeDoVentoMedia?: SortOrder
    horasDePrecipitacao?: SortOrder
    pressaoMinimaNivelDoMar?: SortOrder
    pictocode?: SortOrder
    fracaoDeNeve?: SortOrder
    horasComUmidadeMaior90?: SortOrder
    precipitacaoConvectiva?: SortOrder
    umidadeRelativaMaxima?: SortOrder
    temperaturaMinima?: SortOrder
    direcaoDoVento?: SortOrder
    temperaturaSensacaoMaxima?: SortOrder
    umidadeRelativaMinima?: SortOrder
    temperaturaSensacaoMedia?: SortOrder
    velocidadeDoVentoMinima?: SortOrder
    temperaturaSensacaoMinima?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    indiceUv?: SortOrder
    temperaturaMedia?: SortOrder
    pressaoMaximaNivelDoMar?: SortOrder
    umidadeRelativaMedia?: SortOrder
    classeDePrevisibilidade?: SortOrder
    velocidadeDoVentoMaxima?: SortOrder
  }

  export type DadosDiariosMaxOrderByAggregateInput = {
    id?: SortOrder
    tempo?: SortOrder
    temperaturaInstantanea?: SortOrder
    precipitacao?: SortOrder
    previsibilidade?: SortOrder
    temperaturaMaxima?: SortOrder
    pressaoMediaNivelDoMar?: SortOrder
    velocidadeDoVentoMedia?: SortOrder
    horasDePrecipitacao?: SortOrder
    pressaoMinimaNivelDoMar?: SortOrder
    pictocode?: SortOrder
    fracaoDeNeve?: SortOrder
    horasComUmidadeMaior90?: SortOrder
    precipitacaoConvectiva?: SortOrder
    umidadeRelativaMaxima?: SortOrder
    temperaturaMinima?: SortOrder
    direcaoDoVento?: SortOrder
    temperaturaSensacaoMaxima?: SortOrder
    umidadeRelativaMinima?: SortOrder
    temperaturaSensacaoMedia?: SortOrder
    velocidadeDoVentoMinima?: SortOrder
    temperaturaSensacaoMinima?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    indiceUv?: SortOrder
    manchasDeChuva?: SortOrder
    temperaturaMedia?: SortOrder
    pressaoMaximaNivelDoMar?: SortOrder
    umidadeRelativaMedia?: SortOrder
    classeDePrevisibilidade?: SortOrder
    velocidadeDoVentoMaxima?: SortOrder
  }

  export type DadosDiariosMinOrderByAggregateInput = {
    id?: SortOrder
    tempo?: SortOrder
    temperaturaInstantanea?: SortOrder
    precipitacao?: SortOrder
    previsibilidade?: SortOrder
    temperaturaMaxima?: SortOrder
    pressaoMediaNivelDoMar?: SortOrder
    velocidadeDoVentoMedia?: SortOrder
    horasDePrecipitacao?: SortOrder
    pressaoMinimaNivelDoMar?: SortOrder
    pictocode?: SortOrder
    fracaoDeNeve?: SortOrder
    horasComUmidadeMaior90?: SortOrder
    precipitacaoConvectiva?: SortOrder
    umidadeRelativaMaxima?: SortOrder
    temperaturaMinima?: SortOrder
    direcaoDoVento?: SortOrder
    temperaturaSensacaoMaxima?: SortOrder
    umidadeRelativaMinima?: SortOrder
    temperaturaSensacaoMedia?: SortOrder
    velocidadeDoVentoMinima?: SortOrder
    temperaturaSensacaoMinima?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    indiceUv?: SortOrder
    manchasDeChuva?: SortOrder
    temperaturaMedia?: SortOrder
    pressaoMaximaNivelDoMar?: SortOrder
    umidadeRelativaMedia?: SortOrder
    classeDePrevisibilidade?: SortOrder
    velocidadeDoVentoMaxima?: SortOrder
  }

  export type DadosDiariosSumOrderByAggregateInput = {
    id?: SortOrder
    temperaturaInstantanea?: SortOrder
    precipitacao?: SortOrder
    previsibilidade?: SortOrder
    temperaturaMaxima?: SortOrder
    pressaoMediaNivelDoMar?: SortOrder
    velocidadeDoVentoMedia?: SortOrder
    horasDePrecipitacao?: SortOrder
    pressaoMinimaNivelDoMar?: SortOrder
    pictocode?: SortOrder
    fracaoDeNeve?: SortOrder
    horasComUmidadeMaior90?: SortOrder
    precipitacaoConvectiva?: SortOrder
    umidadeRelativaMaxima?: SortOrder
    temperaturaMinima?: SortOrder
    direcaoDoVento?: SortOrder
    temperaturaSensacaoMaxima?: SortOrder
    umidadeRelativaMinima?: SortOrder
    temperaturaSensacaoMedia?: SortOrder
    velocidadeDoVentoMinima?: SortOrder
    temperaturaSensacaoMinima?: SortOrder
    probabilidadeDePrecipitacao?: SortOrder
    indiceUv?: SortOrder
    temperaturaMedia?: SortOrder
    pressaoMaximaNivelDoMar?: SortOrder
    umidadeRelativaMedia?: SortOrder
    classeDePrevisibilidade?: SortOrder
    velocidadeDoVentoMaxima?: SortOrder
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MetadadosDefaultArgs instead
     */
    export type MetadadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetadadosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UnidadesDefaultArgs instead
     */
    export type UnidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UnidadesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DadosAtuaisDefaultArgs instead
     */
    export type DadosAtuaisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DadosAtuaisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DadosDiariosDefaultArgs instead
     */
    export type DadosDiariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DadosDiariosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}